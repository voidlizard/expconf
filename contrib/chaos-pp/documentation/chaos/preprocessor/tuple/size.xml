<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/tuple/size.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines macros that count the elements in a <link id="tuple"/>.
</overview>

<macro id="TUPLE_QUICK_SIZE" group="size">
	<abstract>
		The <TUPLE_QUICK_SIZE/> macro counts the elements in its argument.
	</abstract>
	<usage lang="C99">
		<syntax><TUPLE_QUICK_SIZE/>(tuple)</syntax>
		<param id="tuple" optional="1">
			The <link id="tuple"/> whose elements are to be counted.
		</param>
	</usage>
	<para>
		This macro expands to the number of elements in <var>tuple</var>.
		If <var>tuple</var> contains more than <LIMIT_TUPLE/> elements, the result is <link id="saturated"/> to <LIMIT_TUPLE/>.
	</para>
	<para>
		Unlike <TUPLE_SIZE/>, <TUPLE_QUICK_SIZE/> is a constant-time operation at the price of a much lower limit on countable elements.
	</para>
	<para>
		This macro operates on the nil <link id="tuple"/> representation used by the core <link id="tuple"/> operations defined in <chaos-preprocessor-tuple-core.h/>.
		Specifically, <code>()</code> is a one-element <link id="tuple"/>, not a zero-element <link id="tuple"/>.
	</para>
	<listing>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-tuple-size.h/>
		
		#if <VARIADICS/>
		
		<TUPLE_QUICK_SIZE/>((a, b, c))       // 3
		<TUPLE_QUICK_SIZE/>((a, b, c, d, e)) // 5
		
		#endif
	</listing>
	<derivative id="TUPLE_QUICK_SIZE_ID" lang="C99"/>
	<derivative id="TUPLE_QUICK_SIZE_" lang="C99"/>
</macro>

<macro id="TUPLE_SIZE" group="size">
	<abstract>
		The <TUPLE_SIZE/> macro counts the elements in its argument.
	</abstract>
	<usage lang="C99">
		<syntax><TUPLE_SIZE/>(tuple)</syntax>
		<param id="tuple" optional="1">
			The <link id="tuple"/> whose elements are to be counted.
		</param>
	</usage>
	<para>
		This macro expands to the number of elements in <var>tuple</var>.
		If <var>tuple</var> contains more than <LIMIT_MAG/> elements, the result is <link id="saturated"/> to <LIMIT_MAG/>.
	</para>
	<para>
		The efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are <assoc id="complexity/size.gif">Î˜</assoc>, where <x-var>n</x-var> is the number of elements in <var>tuple</var>.
	</para>
	<para>
		This macro operates on the nil <link id="tuple"/> representation used by the core <link id="tuple"/> operations defined in <chaos-preprocessor-tuple-core.h/>.
		Specifically, <code>()</code> is a one-element <link id="tuple"/>, not a zero-element <link id="tuple"/>.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <TUPLE_SIZE_BYPASS/> must be used instead.
	</para>
	<derivative id="TUPLE_SIZE_ID" lang="C99"/>
	<derivative id="TUPLE_SIZE_" lang="C99"/>
	<derivative id="TUPLE_SIZE_BYPASS">
		<usage lang="C99">
			<syntax><TUPLE_SIZE_BYPASS/>(s, tuple)</syntax>
		</usage>
		<derivative id="TUPLE_SIZE_BYPASS_ID" lang="C99"/>
		<derivative id="TUPLE_SIZE_BYPASS_" lang="C99"/>
	</derivative>
</macro>

<macro id="VARIADIC_QUICK_SIZE" group="size">
	<abstract>
		The <VARIADIC_QUICK_SIZE/> macro counts the its arguments.
	</abstract>
	<usage lang="C99">
		<syntax><VARIADIC_QUICK_SIZE/>(...)</syntax>
		<param id="..." optional="1">
			The arguments to be counted.
		</param>
	</usage>
	<para>
		This macro expands to the number of arguments it is passed.
		If <code>__VA_ARGS__</code> contains more that <LIMIT_TUPLE/> arguments, the result is <link id="saturated"/> to <LIMIT_TUPLE/>.
	</para>
	<derivative id="VARIADIC_QUICK_SIZE_ID" lang="C99"/>
	<derivative id="VARIADIC_QUICK_SIZE_" lang="C99"/>
</macro>

<macro id="VARIADIC_SIZE" group="size">
	<abstract>
		The <VARIADIC_SIZE/> macro counts the its arguments.
	</abstract>
	<usage lang="C99">
		<syntax><VARIADIC_SIZE/>(...)</syntax>
		<param id="..." optional="1">
			The arguments to be counted.
		</param>
	</usage>
	<para>
		This macro expands to the number of arguments it is passed.
		If <code>__VA_ARGS__</code> contains more that <LIMIT_MAG/> arguments, the result is <link id="saturated"/> to <LIMIT_MAG/>.
	</para>
	<derivative id="VARIADIC_SIZE_ID" lang="C99"/>
	<derivative id="VARIADIC_SIZE_" lang="C99"/>
	<derivative id="VARIADIC_SIZE_BYPASS">
		<usage lang="C99">
			<syntax><VARIADIC_SIZE_BYPASS/>(s, ...)</syntax>
		</usage>
		<derivative id="VARIADIC_SIZE_BYPASS_ID" lang="C99"/>
		<derivative id="VARIADIC_SIZE_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
