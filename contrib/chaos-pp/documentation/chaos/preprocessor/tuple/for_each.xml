<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/tuple/for_each.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that repeats a user-specified target for each element in a <link id="tuple"/>.
</overview>

<macro id="TUPLE_FOR_EACH" type="indirect" group="for-each">
	<abstract>
		The <TUPLE_FOR_EACH/> macro repeats the target specified by its first argument for each element in its second argument.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<TUPLE_FOR_EACH/>(macro, tuple))</syntax>
		<param id="macro">
			The target that is repeated for each element in <var>tuple</var>.
			This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				macro(s, elem)
			</snippet>
		</param>
		<param id="tuple" optional="1">
			The <link id="tuple"/> for which <var>macro</var> is to be repeated for each element.
		</param>
	</usage>
	<usage lang="C99">
		<syntax><EXPR/>(<TUPLE_FOR_EACH/>(macro, tuple, ...))</syntax>
		<param id="macro">
			<para>
				The target that is repeated for each element in <var>tuple</var>.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, elem, data<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>data</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the auxiliary data, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="tuple" optional="1">
			The <link id="tuple"/> for which <var>macro</var> is to be repeated for each element.
		</param>
		<param id="..." optional="1">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<para>
		The <TUPLE_FOR_EACH/> macro itself expands to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This <link id="deferred expression"/>, when invoked with <EXPR/>, expands to the result of the repeated invocation of the target for each element in <var>tuple</var>.
		This is illustrated by the following pseudo-code (where <code>N</code> is the index of the last element in <var>tuple</var>):
		<snippet>
			macro(s, tuple[0], data) macro(s, tuple[1], data) ... macro(s, tuple[N], data)
		</snippet>
	</para>
	<para>
		The target is invoked with the current <link id="recursion state"/> (<var>s</var>), a particular element (<var>elem</var>), and, if it exists, the auxiliary data (<code>__VA_ARGS__</code>).
		This target may expand to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This allows the target to recurse on itself if necessary.
	</para>
	<para>
		It is possible to omit the auxiliary data argument altogether.
		This is different than passing "nothing" as the auxiliary data.
		<snippet>
			#define D (a, b, c)
			
			<EXPR/>(
			    <TUPLE_FOR_EACH/>(MACRO, D,) // #1
			    <TUPLE_FOR_EACH/>(MACRO, D)  // #2
			)
		</snippet>
		The first line passed "nothing" as the auxiliary data, which causes <code>MACRO</code> to be invoked as (e.g.)...
		<snippet>MACRO(s, a,)</snippet>
		The second line omits the auxiliary data, which causes <code>MACRO</code> to be invoked as (e.g.)...
		<snippet>MACRO(s, a)</snippet>
		The fundamental difference is that, in the first line, the auxiliary data is empty (which might have a valid meaning as data), but, in the second line, <em>there is no auxiliary data</em>.
		Hence, the algorithm is overloaded on a <link id="true-optional parameter"/>.
	</para>
	<para>
		Invocations of the target are trampolined such that each invocation is invoked with <code><NEXT/>(s)</code>, where <var>s</var> is the original <link id="recursion state"/> at the beginning of the algorithm (i.e. <code><STATE/>()</code>).
		This maximizes the utility of the <link id="recursion backend"/>.
	</para>
	<para>
		Ignoring the complexity of <var>macro</var> (which is invoked once for each element in <var>tuple</var>), the efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are <assoc id="complexity/for_each.gif">Θ</assoc>, where <x-var>n</x-var> is the number of elements in <var>tuple</var>.
	</para>
	<para>
		This macro operates on the nil <link id="tuple"/> representation used by the core <link id="tuple"/> operations defined in <chaos-preprocessor-tuple-core.h/>.
		Specifically, <code>()</code> is a one-element <link id="tuple"/>, not a zero-element <link id="tuple"/>.
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <TUPLE_FOR_EACH_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <TUPLE_FOR_EACH_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-recursion-expr.h/>
		#include <chaos-preprocessor-tuple-for_each.h/>
		
		#if <VARIADICS/>
		
		#define MACRO(s, elem) { elem }
		
		<EXPR/>(<TUPLE_FOR_EACH/>(
		    MACRO, (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
		))
		// { 0 } { 1 } { 2 } { 3 } { 4 } { 5 } { 6 } { 7 } { 8 } { 9 } { 10 } { 11 } { 12 }
		
		#endif
	</listing>
	<derivative id="TUPLE_FOR_EACH_ID" lang="C99"/>
	<derivative id="TUPLE_FOR_EACH_" lang="C99"/>
	<derivative id="TUPLE_FOR_EACH_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<TUPLE_FOR_EACH_S/>(s, macro, tuple))</syntax>
		</usage>
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<TUPLE_FOR_EACH_S/>(s, macro, tuple, ...))</syntax>
		</usage>
		<derivative id="TUPLE_FOR_EACH_S_ID" lang="C99"/>
		<derivative id="TUPLE_FOR_EACH_S_" lang="C99"/>
	</derivative>
</macro>

</header>
