<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/seq/for_each.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that repeats a user-specified target for each element in a <link id="sequence"/>.
</overview>

<macro id="SEQ_FOR_EACH" type="indirect" group="for-each">
	<abstract>
		The <SEQ_FOR_EACH/> macro repeats the target specified by its first argument for each element in its second argument.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<SEQ_FOR_EACH/>(macro, seq))</syntax>
		<param id="macro">
			<para>
				The target that is to be repeated for each element in <var>seq</var>.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, elem<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				If <var>seq</var> contains elements that have varying arities, <var>elem</var> mus be <code>...</code>.
				Otherwise, <var>elem</var> must be the number of parameters that corresponds to the arity of each element in <var>seq</var>.
			</para>
		</param>
		<param id="seq" optional="1">
			The <link id="sequence"/> for which <var>macro</var> is to be repeated for each element.
		</param>
	</usage>
	<usage lang="C99">
		<syntax><EXPR/>(<SEQ_FOR_EACH/>(macro, seq, ...))</syntax>
		<param id="macro">
			<para>
				The target that is to be repeated for each element in <var>seq</var>.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, elem<sup>†</sup>, data<sup>‡</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>elem</var> pseudo-parameter must be the number of parameters that corresponds to the arity of each element in <var>seq</var>.
			</para>
			<para>
				<sup>‡</sup>
				The <var>data</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the auxiliary data, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="seq" optional="1">
			The <link id="sequence"/> for which <var>macro</var> is to be repeated for each element.
		</param>
		<param id="..." optional="1">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><EXPR/>(<SEQ_FOR_EACH/>(macro, seq, data))</syntax>
		<param id="macro">
			The target that is to be repeated for each element in <var>seq</var>.
			This target must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				macro(s, elem, data)
			</snippet>
		</param>
		<param id="seq">
			The <link id="sequence"/> for which <var>macro</var> is to be repeated for each element.
		</param>
		<param id="data">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<para>
		The <SEQ_FOR_EACH/> macro itself expands to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This <link id="deferred expression"/>, when invoked by <EXPR/>, expands to the result of the repeated invocation of the target for each element in <var>seq</var>.
		This is illustrated by the following pseudo-code (where <code>N</code> is the index of the last element in <var>seq</var>):
		<snippet>
			macro(s, seq[0], data) macro(s, seq[1], data) ... macro(s, seq[N], data)
		</snippet>
	</para>
	<para>
		The target is invoked with the current <link id="recursion state"/> (<var>s</var>), a particular element (<var>elem</var>), and, if it exists, the auxiliary data (<var>data</var> or <code>__VA_ARGS__</code>).
		This target may expand to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This allows the target to recurse on itself if necesssary.
	</para>
	<para>
		In C99, it is possible to omit the auxiliary data argument altogether.
		This is different than passing "nothing" as the auxiliary data.
		<snippet>
			<EXPR/>(
			    <SEQ_FOR_EACH/>(MACRO, (a)(b)(c),) // #1
			    <SEQ_FOR_EACH/>(MACRO, (a)(b)(c))  // #2
			)
		</snippet>
		The first line passes "nothing" as the auxiliary data, which causes <code>MACRO</code> to be invoked as (e.g.)...
		<snippet>MACRO(s, a,)</snippet>
		The second line omits the auxiliary data, which causes <code>MACRO</code> to be invoked as (e.g.)...
		<snippet>MACRO(s, a)</snippet>
		The fundamental difference is that, in the first line, the auxiliary data is empty (which might have a valid meaning as data), but, in the second line, <em>there is no auxiliary data</em>.
		Hence, the algorithm is overloaded on a <link id="true-optional parameter"/>.
	</para>
	<para>
		Invocations of the target are trampolined such that each invocation is invoked with <code><NEXT/>(s)</code>, where <var>s</var> is the original <link id="recursion state"/> at the beginning of the algorithm (i.e. <code><STATE/>()</code>).
		This maximizes the utility of the <link id="recursion backend"/>.
	</para>
	<para>
		This macro uses <link id="sequential iteration"/>.
		As a result, the efficiency of the algorithm's use of the <link id="recursion backend"/>, described in terms of the number of <link id="recursion steps"/> required to complete the algorithm and ignoring the complexity of <var>macro</var>, is a constant Θ(1).
		As such, the algorithm is theoretically capable of processing <link id="sequences"/> containing an <em>unrestricted</em> number of elements.
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <SEQ_FOR_EACH_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <SEQ_FOR_EACH_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-lambda-ops.h/>
		#include <chaos-preprocessor-recursion-expr.h/>
		#include <chaos-preprocessor-seq-for_each.h/>
		
		#define MACRO(s, elem, _) [elem]
		
		<EXPR/>(<SEQ_FOR_EACH/>(
		    MACRO, (x)(y)(z), ~
		))
		// [x] [y] [z]
		
		#if <VARIADICS/>
		
		#define BIN(s, x, y) [x, y]
		
		<EXPR/>(<SEQ_FOR_EACH/>(
		    BIN, (a, b)(c, d)(e, f)
		))
		// [a, b] [c, d] [e, f]
		
		<EXPR/>(<SEQ_FOR_EACH/>(
		    <LAMBDA/>([) <ARG/>(1) ],
		    (x)(y)(z)
		))
		// [x] [y] [z]
		
		#endif
	</listing>
	<derivative id="SEQ_FOR_EACH_ID"/>
	<derivative id="SEQ_FOR_EACH_" lang="C99"/>
	<derivative id="SEQ_FOR_EACH_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<SEQ_FOR_EACH_S/>(s, macro, seq))</syntax>
		</usage>
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<SEQ_FOR_EACH_S/>(s, macro, seq, ...))</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><EXPR_S/>(s)(<SEQ_FOR_EACH_S/>(s, macro, seq, data))</syntax>
		</usage>
		<derivative id="SEQ_FOR_EACH_S_ID"/>
		<derivative id="SEQ_FOR_EACH_S_" lang="C99"/>
	</derivative>
</macro>

</header>
