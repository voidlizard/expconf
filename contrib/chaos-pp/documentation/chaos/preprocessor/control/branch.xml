<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/control/branch.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines a branching control construct.
</overview>

<macro id="BRANCH" group="if">
	<abstract>
		The <BRANCH/> macro selects a branch of execution.
	</abstract>
	<usage lang="C99">
		<syntax><BRANCH/> if elif else (0xENDIF)</syntax>
		<param id="if">
			The initial "if" branch.
			This must be one of the following forms:
			<snippet>
				(0xIF)(cond)(...)
				(0xIIF)(bit)(...)
			</snippet>
			Valid values for the <var>cond</var> argument range from <code>0</code> to <LIMIT_MAG/>.
			Valid values for the <var>bit</var> argument are <code>0</code> and <code>1</code>.
		</param>
		<param id="elif" optional="1">
			Zero or more "else-if" branches, where each branch is one of the following forms:
			<snippet>
				(0xELIF)(cond)(...)
				(0xELIIF)(bit)(...)
			</snippet>
			Valid values for the <var>cond</var> argument range from <code>0</code> to <LIMIT_MAG/>.
			Valid values for the <var>bit</var> argument are <code>0</code> and <code>1</code>.
		</param>
		<param id="else" optional="1">
			The "else" branch.
			If this branch exists, it must be in the in the following form:
			<snippet>
				(0xELSE)(...)
			</snippet>
		</param>
	</usage>
<usage lang="C/C++">
		<syntax><BRANCH/> if elif else (0xENDIF)</syntax>
		<param id="if">
			The initial "if" branch.
			This must be one of the following forms:
			<snippet>
				(0xIF)(cond)(expr)
				(0xIIF)(bit)(expr)
			</snippet>
			Valid values for the <var>cond</var> argument range from <code>0</code> to <LIMIT_MAG/>.
			Valid values for the <var>bit</var> argument are <code>0</code> and <code>1</code>.
		</param>
		<param id="elif" optional="1">
			Zero or more "else-if" branches, where each branch is one of the following forms:
			<snippet>
				(0xELIF)(cond)(expr)
				(0xELIIF)(bit)(expr)
			</snippet>
			Valid values for the <var>cond</var> argument range from <code>0</code> to <LIMIT_MAG/>.
			Valid values for the <var>bit</var> argument are <code>0</code> and <code>1</code>.
		</param>
		<param id="else" optional="1">
			The "else" branch.
			If this branch exists, it must be in the in the following form:
			<snippet>
				(0xELSE)(expr)
			</snippet>
		</param>
	</usage>
	<para>
		Each <var>cond</var> or <var>bit</var> condition is checked in order.
		If a <var>cond</var> is non-zero or a <var>bit</var> is <code>1</code>, the entire construct expands to the <var>expr</var> or <code>__VA_ARGS__</code> associated with the associated branch.
		If all <var>cond</var> and <var>bit</var> conditions evaluate to <code>0</code>, this macro expands to the <var>expr</var> or <code>__VA_ARGS__</code> associated with the "else" branch.
		If no "else" branch exists, this macro expands to nothing.
	</para>
	<para>
		The behavior of this macro is illustrated in the following example:
		<snippet>
			<BRANCH/>
			    (0xIF)(X)(A)
			    (0xELIF)(Y)(B)
			    (0xELIF)(Z)(C)
			    (0xELSE)(D)
			    (0xENDIF)
		</snippet>
		In this example, if <code>X</code> evaluates to non-zero, the entire construct, from <BRANCH/> to <code>(0xENDIF)</code> expands to <code>A</code>.
		Otherwise, if <code>Y</code> evaluates to non-zero, the construct expands to <code>B</code>.
		Otherwise, if <code>Z</code> evaluates to non-zero, the construct expands to <code>C</code>.
		Otherwise, the construct expands to <code>D</code>.
	</para>
	<para>
		Note that any number of "else-if" branches may exist, though no "else-if" branches are required.
		Also note that the "else" branch need not exist.
		For example, the following lines are roughly equivalent to <code><INLINE_WHEN/>(bit)(expr)</code> and <code><IIF/>(bit)(T, F)</code> respectively:
		<snippet>
		    <BRANCH/>(0xIIF)(bit)(expr)(0xENDIF)
		    <BRANCH/>(0xIIF)(bit)(T)(0xELSEIF)(F)(0xENDIF)
		</snippet>
		They are not equivalent because the <BRANCH/> construct expands to a value that cannot directly expand against trailing invocations such as,
		<snippet>
			#define A() !
			
			<BRANCH/>(0xIIF)(1)(A)(0xENDIF)() // A ()
			<INLINE_WHEN/>(1)(A)()            // !
		</snippet>
		In order to make the above expand as desired, the result of <BRANCH/> needs to be "cleaned" with an identity macro such as <EXPAND/>.
		<snippet>
			<EXPAND/>(<BRANCH/>(0xIIF)(1)(A)(0xENDIF))() // !
		</snippet>
		In C99, the <IIF/> case above is also not equivalent because only the "else" branch of the <IIF/> invocation may be variadic.
	</para>
	<para>
		Every element of this branching construct is lazy.
		In other words, the <var>expr</var> or <code>__VA_ARGS__</code> for a particular branch is not evaluated unless it is selected.
		Further, each <var>cond</var> or <var>bit</var> is not evaluates unless all previous <var>cond</var> and <var>bit</var> values evaluated to <code>0</code>.
		<snippet>
			#define VALID() 1
			#define INVALID() VALID(!) // too many arguments
			
			<BRANCH/>
			    (0xIIF)(1)(
			        VALID()
			    )
			    (0xELIIF)(INVALID())(
			        INVALID()
			    )
			    (0xENDIF)
		</snippet>
		If any one of the <code>INVALID()</code> invocations was actually invoked, and error would be produced.
		Because the construct is lazy, however, none of the <code>INVALID()</code> invocations is invoked.
	</para>
	<listing>
		#include <chaos-preprocessor-arithmetic-machine-add.h/>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-control-branch.h/>
		#include <chaos-preprocessor-recursion-basic.h/>
		#include <chaos-preprocessor-recursion-expr.h/>
		#include <chaos-preprocessor-tuple-core.h/>
		
		#if <VARIADICS/>
		
		#define ADD(...) \
		    <EXPR/>(ADD_I( \
		        <OBSTRUCT/>(), <NEXT/>(<STATE/>()), \
		        (__VA_ARGS__) \
		    )) \
		    /**/
		#define ADD_INDIRECT() ADD_I
		#define ADD_I(_, s, tuple) \
		    <BRANCH/> _ \
		        (0xIIF)(<TUPLE_IS_CONS/>(tuple))( \
		            <ADD_MACHINE_S/> _( \
		                s, <TUPLE_HEAD/> _(tuple), \
		                <EXPR_S/>(s) _(ADD_INDIRECT _()( \
		                    <OBSTRUCT/> _(), <NEXT/>(s), \
		                    <TUPLE_TAIL/> _(tuple) \
		                )) \
		            ) \
		        ) \
		        (0xELSE)(0) \
		        (0xENDIF) \
		    /**/

		ADD(1, 2, 3, 4, 5, 6, 7, 8, 9) // 45
		
		#endif
	</listing>
	<derivative id="BRANCH_ID"/>
	<derivative id="BRANCH_" lang="C99"/>
</macro>

</header>
