<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/control/while.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines a looping construct.
</overview>

<macro id="WHILE" type="indirect" group="looping">
	<abstract>
		The <WHILE/> macro iterates a state with a user-specified operation while a user-specified predicate expands to <code>1</code>.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<WHILE/>(pred, op, ...))</syntax>
		<param id="pred">
			<para>
				The predicate that determines whether the loop should continue.
				This predicate must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					pred(s, state<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>state</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the initial state, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="op">
			<para>
				The operation used to iterate the state.
				This operation must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					op(s, state<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>state</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the initial state, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="..." optional="1">
			The initial state of the loop.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><EXPR/>(<WHILE/>(pred, op, state))</syntax>
		<param id="pred">
			The predicate that determines whether the loop should continue.
			This predicate must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				pred(s, state)
			</snippet>
		</param>
		<param id="op">
			The operation used to iterate the state.
			This operation must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				op(s, state)
			</snippet>
		</param>
		<param id="state">
			The initial state of the loop.
		</param>
	</usage>
	<para>
		The <WHILE/> macro itself expands to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This <link id="deferred expression"/>, when invoked by <EXPR/>, expands to the result of repeatedly applying the operation to the state until the predicate expands to <code>0</code>.
	</para>
	<para>
		Both the predicate and the operation are invoked with the current <link id="recursion state"/> (<var>s</var>) and the current state (<var>state</var> or <code>__VA_ARGS__</code>).
		The predicate must expand to either <code>0</code>, <code>1</code>, or a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code> that expands to either <code>0</code> or <code>1</code>.
		If it expands to <code>0</code>, the loop terminates, and the algorithm expands to the current state.
		Otherwise, the operation is applied to the current state to yield a new state or a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code> that yields a new state, and the loop continues.
	</para>
	<para>
		Ignoring the complexity of <var>pred</var> and the <var>op</var> (which are invoked, at most, once per loop iteration), each loop iteration requires only a single <link id="recursion step"/>.
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <WHILE_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <WHILE_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-arithmetic-dec.h/>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-control-while.h/>
		#include <chaos-preprocessor-lambda-ops.h/>
		#include <chaos-preprocessor-logical-bool.h/>
		
		#define PRED(s, state) <BOOL/>(state)
		#define OP(s, state) <DEC/>(state)
		
		<EXPR/>(<WHILE/>(PRED, OP, 100)) // 0
		
		#if <VARIADICS/>
		
		??=include <PLACEHOLDERS/>(1)
		
		<EXPR/>(<WHILE/>(
		    <BOOL_/>(_1), <DEC_/>(_1), 100
		))
		// 0
		
		??=include <PLACEHOLDERS/>(0)
		
		#endif
	</listing>
	<derivative id="WHILE_ID"/>
	<derivative id="WHILE_" lang="C99"/>
	<derivative id="WHILE_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<WHILE_S/>(s, pred, op, ...))</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><EXPR_S/>(s)(<WHILE_S/>(s, pred, op, state))</syntax>
		</usage>
		<derivative id="WHILE_S_ID"/>
		<derivative id="WHILE_S_" lang="C99"/>
	</derivative>
</macro>

</header>
