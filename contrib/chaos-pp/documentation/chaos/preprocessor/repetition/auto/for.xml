<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/repetition/auto/for.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines a predicated repetition algorithm.
</overview>

<macro id="AUTO_FOR" type="object" group="repetition">
	<abstract>
		The <AUTO_FOR/> macro is a predicated repetition construct.
	</abstract>
	<usage lang="C99">
		<syntax><AUTO_FOR/>(pred, op, macro, ...)</syntax>
		<param id="pred">
			<para>
				The predicate to be used to determine whether the algorithm should continue.
				This predicate must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					pred(s, state<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>state</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the initial state, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="op">
			<para>
				The operation to be used to iterate the state.
				This operation must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					op(s, state<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>state</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the initial state, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="macro">
			<para>
				The target to be repeated.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, state<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>state</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the initial state, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="..." optional="1">
			The initial state.
		</param>
	</usage>
	<para>
		The <AUTO_FOR/> macro is a <link id="higher-order thunk"/> that deduces the current <link id="higher-order entry point"/> and invokes <FOR/>.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-arithmetic-dec.h/>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-lambda-ops.h/>
		#include <chaos-preprocessor-logical-bool.h/>
		#include <chaos-preprocessor-repetition-auto-for.h/>
		
		#if <VARIADICS/>
		
		??=include <PLACEHOLDERS/>(1)
		
		<AUTO_FOR/>(
		    <BOOL_/>(_1), <DEC_/>(_1), _1, 10
		)
		// 10 9 8 7 6 5 4 3 2 1
		
		??=include <PLACEHOLDERS/>(0)
		
		#endif
	</listing>
	<derivative id="AUTO_FOR_ID" lang="C99"/>
	<derivative id="AUTO_FOR_" lang="C99"/>
</macro>

</header>
