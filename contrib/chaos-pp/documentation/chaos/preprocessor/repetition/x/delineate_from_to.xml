<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/repetition/x/delineate_from_to.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an <link id="exponential"/> algorithm that delineates a user-specified target for each number in a specified range which can be <link id="parametrically resumed"/>.
</overview>

<macro id="DELINEATE_FROM_TO_X" type="indirect" group="delineation">
	<abstract>
		The <DELINEATE_FROM_TO_X/> macro delineates its fifth argument for each number in the range specified by its second and third arguments.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<DELINEATE_FROM_TO_X/>(size, from, to, sep, macro))</syntax>
		<param id="size">
			The size of the buffer of valid <link id="recursion steps"/> maintained by the algorithm.
		</param>
		<param id="from">
			The lower bound of the range of numbers for which <var>macro</var> is to be repeated.
			Valid values range from <code>0</code> to <var>to</var>.
		</param>
		<param id="to">
			The upper bound of the range of numbers for which <var>macro</var> is to be repeated.
			Valid values range from <var>from</var> to <LIMIT_MAG/>.
		</param>
		<param id="sep">
			The delineator to be situated between each repetition of <var>macro</var>.
			This delineator must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				sep()
			</snippet>
		</param>
		<param id="macro">
			The target that is to be repeated.
			This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				macro(s, n)
			</snippet>
		</param>
	</usage>
	<usage lang="C99">
		<syntax><EXPR/>(<DELINEATE_FROM_TO_X/>(size, from, to, sep, macro, ...))</syntax>
		<param id="size">
			The size of the buffer of valid <link id="recursion steps"/> maintained by the algorithm.
		</param>
		<param id="from">
			The lower bound of the range of numbers for which <var>macro</var> is to be repeated.
			Valid values range from <code>0</code> to <var>to</var>.
		</param>
		<param id="to">
			The upper bound of the range of numbers for which <var>macro</var> is to be repeated.
			Valid values range from <var>from</var> to <LIMIT_MAG/>.
		</param>
		<param id="sep">
			The delineator to be situated between each repetition of <var>macro</var>.
			This delineator must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				sep()
			</snippet>
		</param>
		<param id="macro">
			<para>
				The target that is to be repeated.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, n, data<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>data</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the auxiliary data, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="..." optional="1">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><EXPR/>(<DELINEATE_FROM_TO_X/>(size, from, to, sep, macro, data))</syntax>
		<param id="size">
			The size of the buffer of valid <link id="recursion steps"/> maintained by the algorithm.
		</param>
		<param id="from">
			The lower bound of the range of numbers for which <var>macro</var> is to be repeated.
			Valid values range from <code>0</code> to <var>to</var>.
		</param>
		<param id="to">
			The upper bound of the range of numbers for which <var>macro</var> is to be repeated.
			Valid values range from <var>from</var> to <LIMIT_MAG/>.
		</param>
		<param id="sep">
			The delineator to be situated between each repetition of <var>macro</var>.
			This delineator must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				sep()
			</snippet>
		</param>
		<param id="macro">
			The target that is to be repeated.
			This target must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				macro(s, n, data)
			</snippet>
		</param>
		<param id="data">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<para>
		This macro behaves identically to <DELINEATE_FROM_TO/> except that the invocations of the target are <em>not</em> trampolined, the algorithm makes <link id="exponential"/> use of the <link id="recursion backend"/>, and the algorithm itself yields a trampolined <link id="deferred expression"/> whenever the number of <link id="recursion steps"/> is exhausted.
		This allows for <link id="parametric resumption"/>.
	</para>
	<para>
		This algorithm maintains a buffer of <var>size</var> <link id="recursion steps"/> available at all times.
		This guarantees that the target has <em>at least</em> <var>size</var> <link id="recursion steps"/> available whenever it is invoked.
	</para>
	<para>
		The <link id="exponential"/> structure of the <code>X</code>-suffixed algorithms yields a total of <library-assoc id="alpha.gif">α</library-assoc> <link id="recursion steps"/>, where <x-var>p</x-var> is the number of <link id="parametric resumptions"/> plus the initial entry, <x-var>s<sub>ω</sub></x-var> is <LIMIT_EXPR/>, <x-var>s</x-var> is the current <link id="recursion state"/> at the beginning of the algorithm (i.e. <code><STATE/>()</code>), <x-var>s<sub>δ</sub></x-var> is the buffer size, and <x-var>z</x-var> is the exponential base.
		Currently, <x-var>z</x-var> is fixed at two in the <DELINEATE_FROM_TO_X/> algorithm (though it could easily be increased), which reduces the equation to <library-assoc id="beta.gif">β</library-assoc>.
		Ignoring the complexity of <var>macro</var> (which is invoked exactly <var>to</var> - <var>from</var> times), the efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are Θ(<x-var>t</x-var>-<x-var>f</x-var>+1), where <x-var>t</x-var> is <var>to</var> and <x-var>f</x-var> is <var>from</var>.
		These bounds preserve all low-order terms, which implies that the algorithm can generate exactly <assoc id="complexity/delineate_from_to.gif">γ</assoc> repetitions, where <x-var>m</x-var> is <LIMIT_MAG/>.
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <DELINEATE_FROM_TO_X_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <DELINEATE_FROM_TO_X_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<derivative id="DELINEATE_FROM_TO_X_ID"/>
	<derivative id="DELINEATE_FROM_TO_X_" lang="C99"/>
	<derivative id="DELINEATE_FROM_TO_X_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<DELINEATE_FROM_TO_X_S/>(s, size, from, to, sep, macro))</syntax>
		</usage>
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<DELINEATE_FROM_TO_X_S/>(s, size, from, to, sep, macro, ...))</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><EXPR_S/>(s)(<DELINEATE_FROM_TO_X_S/>(s, size, from, to, sep, macro, data))</syntax>
		</usage>
		<derivative id="DELINEATE_FROM_TO_X_S_ID"/>
		<derivative id="DELINEATE_FROM_TO_X_S_" lang="C99"/>
	</derivative>
</macro>

</header>
