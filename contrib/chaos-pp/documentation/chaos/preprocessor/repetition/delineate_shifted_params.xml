<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/repetition/delineate_shifted_params.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that delineates a sequence of preprocessing tokens a specified number of times.
</overview>

<macro id="DELINEATE_SHIFTED_PARAMS" type="indirect" group="parameters">
	<abstract>
		The <DELINEATE_SHIFTED_PARAMS/> macro delineates its third argument one less time than the number specified by its first argument.
	</abstract>
	<usage lang="C99">
		<syntax><DELINEATE_SHIFTED_PARAMS/>(count, sep, ...)</syntax>
		<param id="count">
			One greater than the number of times that <code>__VA_ARGS__</code> is to be repeated.
			Valid values range from <code>0</code> to <LIMIT_MAG/>.
		</param>
		<param id="sep">
			The delineator to be situated between each repetition of <code>__VA_ARGS__</code>.
			This delineator must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				sep()
			</snippet>
		</param>
		<param id="..." optional="1">
			The sequence of preprocessing tokens to be repeated.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><DELINEATE_SHIFTED_PARAMS/>(count, sep, param)</syntax>
		<param id="count">
			One greater than the number of times that <var>param</var> is to be repeated.
			Valid values range from <code>0</code> to <LIMIT_MAG/>.
		</param>
		<param id="sep">
			The delineator to be situated between each repetition of <var>param</var>.
			This delineator must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				sep()
			</snippet>
		</param>
		<param id="param">
			The sequence of preprocessing tokens to be repeated.
		</param>
	</usage>
	<para>
		This macro expands to the result of delineating <var>param</var> or <code>__VA_ARGS__</code> with <var>sep</var> <var>count</var> - 1 times such that the rightmost preprocessing token of each repetition is concatenated to the position of the repetition.
		This is illustrated by the following pseudo-code (where <code>N</code> is <var>count</var> - 1):
		<snippet>
			param ## 1 sep() param ## 2 sep() ... param ## N
		</snippet>
	</para>
	<para>
		The rightmost preprocessing token of <var>param</var> or <code>__VA_ARGS__</code> must be either pasteable to a number or be a binary parenthetic expression such as
		<snippet>
			(a, b)
		</snippet>
		If <var>param</var> or <code>__VA_ARGS__</code> is a binary parenthetic expression, this macro extracts the two elements and concatenates the position of the current repetition to each of them.
		This is illustrated by the following pseudo-code (where <code>N</code> is again <var>count</var> - 1):
		<snippet>
			a ## 1 b ## 1 sep() a ## 2 b ## 2 sep() ... a ## N b ## N
		</snippet>
		In C99, the requirement that a parenthetic expression must be binary is relaxed.
		It can be any arity provided that there are at least two elements.
		<snippet>
			(a, ...)
		</snippet>
		In that circumstance, the current repetition number is concatenated to both the first of the two elements and to the all the rest of the elements as a single unit.
	</para>
	<para>
		This secondary mechanism is intended to make it easy to define parameter lists, such as the following:
		<snippet>
			T1 p1, T2 p2, ... T3 p3
		</snippet>
	</para>
	<para>
		The efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are Î˜(<x-var>n</x-var>), where <x-var>n</x-var> is <var>count</var>.
	</para>
	<para>
		Note that <DELINEATE_SHIFTED_PARAMS/> is functionally equivalent to <ENUM_SHIFTED_PARAMS/> when <var>sep</var> is <COMMA/>.
	</para>
	<para>
		This macro differs from <DELINEATE_PARAMS/> simply by omitting the first repetition which can be useful in many contexts.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <DELINEATE_SHIFTED_PARAMS_BYPASS/> must be used instead.
	</para>
	<listing>
		#include <chaos-preprocessor-facilities-intercept.h/>
		#include <chaos-preprocessor-punctuation-comma.h/>
		#include <chaos-preprocessor-repetition-delineate_shifted_params.h/>
		
		<DELINEATE_SHIFTED_PARAMS/>(
		    3, <COMMA/>, class T
		)
		// class T1, class T2
		
		<DELINEATE_SHIFTED_PARAMS/>(
		    3, <COMMA/>, (class T, = U)
		)
		// class T1 = U1, class T2 = U2
		
		<DELINEATE_SHIFTED_PARAMS/>(
		    3, <COMMA/>, (class T, = void <INTERCEPT/>)
		)
		// class T1 = void, class T2 = void
	</listing>
	<derivative id="DELINEATE_SHIFTED_PARAMS_ID"/>
	<derivative id="DELINEATE_SHIFTED_PARAMS_" lang="C99"/>
	<derivative id="DELINEATE_SHIFTED_PARAMS_BYPASS">
		<usage lang="C99">
			<syntax><DELINEATE_SHIFTED_PARAMS_BYPASS/>(s, count, sep, ...)</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><DELINEATE_SHIFTED_PARAMS_BYPASS/>(s, count, sep, param)</syntax>
		</usage>
		<derivative id="DELINEATE_SHIFTED_PARAMS_BYPASS_ID"/>
		<derivative id="DELINEATE_SHIFTED_PARAMS_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
