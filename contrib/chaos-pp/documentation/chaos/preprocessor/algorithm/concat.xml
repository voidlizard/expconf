<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/algorithm/concat.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that concatenates the elements of a <link id="generic data structure"/>.
</overview>

<macro id="CONCAT" type="indirect" group="concatenation">
	<abstract>
		The <CONCAT/> macro concatenates the elements of its argument.
	</abstract>
	<usage>
		<syntax><CONCAT/>(g)</syntax>
		<param id="g">
			The <link id="generic data structure"/> whose elements are to be concatenated.
		</param>
	</usage>
	<para>
		This macro performs an ordered concatenation of the elements of <var>g</var> beginning with the first element.
		This is illustrated by the following pseudo-code:
		<snippet>
			( ... ((g[0] ## g[1]) ## g[2]) ... ## g[length(g) - 1])
		</snippet>
	</para>
	<para>
		In C99, if <var>g</var> contains non-unary elements, the sub-elements of each element will also be concatenated.
		For example,
		<snippet>
			<CONCAT/>((<SEQ/>) (a, b)(c, d)) // abcd
		</snippet>
	</para>
	<para>
		The efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are Î˜(<x-var>n</x-var>+1), where <x-var>n</x-var> is the number of elements in <var>g</var>.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <CONCAT_BYPASS/> must be used instead.
	</para>
	<listing>
		#include <chaos-preprocessor-algorithm-concat.h/>
		#include <chaos-preprocessor-list-core.h/>
		
		<CONCAT/>(
		    (<LIST/>) (C, (H, (A, (O, (S, ...)))))
		)
		// CHAOS
	</listing>
	<derivative id="CONCAT_ID"/>
	<derivative id="CONCAT_" lang="C99"/>
	<derivative id="CONCAT_BYPASS">
		<usage>
			<syntax><CONCAT_BYPASS/>(s, g)</syntax>
		</usage>
		<derivative id="CONCAT_BYPASS_ID"/>
		<derivative id="CONCAT_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
