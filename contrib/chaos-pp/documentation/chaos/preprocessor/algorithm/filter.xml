<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/algorithm/filter.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that filters elements from a <link id="generic data structure"/> according to a user-specified criteria.
</overview>

<macro id="FILTER" type="indirect" group="filtration">
	<abstract>
		The <FILTER/> macro filters elements from its second argument according to the criteria specified by its first argument.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<FILTER/>(pred, g))</syntax>
		<param id="pred">
			<para>
				The predicate that determines whether an element is to remain in the resulting <link id="generic data structure"/>.
				This predicate must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					pred(s, elem<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				If the type of <var>g</var> is non-variadic, <var>elem</var> must be either <code>...</code> or the number of parameters that corresponds to the number of sub-elements in each element of <var>g</var>.
				Otherwise, <var>elem</var> must be <code>...</code> or a single parameter.
			</para>
		</param>
		<param id="g">
			The <link id="generic data structure"/> to be filtered.
		</param>
	</usage>
	<usage lang="C99">
		<syntax><EXPR/>(<FILTER/>(pred, g, ...))</syntax>
		<param id="pred">
			<para>
				The predicate that determines whether an element is to remain in the resulting <link id="generic data structure"/>.
				This predicate must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					pred(s, elem<sup>†</sup>, data<sup>‡</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				If the type of <var>g</var> is non-variadic, <var>elem</var> must be the number of parameters that corresponds to the number of sub-elements in each element of <var>g</var>.
				Otherwise, <var>elem</var> must be a single parameter.
			</para>
			<para>
				<sup>‡</sup>
				The <var>data</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the auxiliary data, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="g">
			The <link id="generic data structure"/> to be filtered.
		</param>
		<param id="..." optional="1">
			Auxiliary data to be passed through the algorithm to the predicate.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><EXPR/>(<FILTER/>(pred, g, data))</syntax>
		<param id="pred">
			The predicate that determines whether an element is to remain in the resulting <link id="generic data structure"/>.
			This predicate must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				pred(s, elem, data)
			</snippet>
		</param>
		<param id="g">
			The <link id="generic data structure"/> to be filtered.
		</param>
		<param id="data">
			Auxiliary data to be passed through the algorithm to the predicate.
		</param>
	</usage>
	<para>
		The <FILTER/> macro itself expands to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This <link id="deferred expression"/>, when invoked by <EXPR/>, expands to a <link id="generic data structure"/> of the same type as <var>g</var> that contains the elements for which the predicate expands to <code>1</code>.
	</para>
	<para>
		The predicate is invoked for each element in <var>g</var> with the current <link id="recursion state"/> (<var>s</var>), the current element (<var>elem</var>), and, if it exists, the auxiliary data (<var>data</var> or <code>__VA_ARGS__</code>).
		This invocation must expand to <code>0</code>, <code>1</code>, or a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code> that expands to either <code>0</code> or <code>1</code>.
		Expansion to a <link id="deferred expression"/> allows the predicate to recurse on itself if necessary.
	</para>
	<para>
		In C99, it is possible to omit the auxiliary data argument altogether.
		This is different than passing "nothing" as the auxiliary data.
		<snippet>
			#define D (<TUPLE/>) (a, b, c)

			<EXPR/>(
			    <FILTER/>(PRED, D,) // #1
			    <FILTER/>(PRED, D)  // #2
			)
		</snippet>
		The first line passes "nothing" as the auxiliary data, which causes <code>PRED</code> to be invoked as (e.g.)...
		<snippet>PRED(s, a,)</snippet>
		The second line omits the auxiliary data, which causes <code>PRED</code> to be invoked as (e.g.)...
		<snippet>PRED(s, a)</snippet>
		The fundamental difference is that, in the first line, the auxiliary data is empty (which might have a valid meaning as data), but, in the second line, <em>there is no auxiliary data</em>.
		Hence, the algorithm is overloaded on a <link id="true-optional parameter"/>.
	</para>
	<para>
		Invocations of the predicate are trampolined such that each invocation is invoked with <code><NEXT/>(s)</code>, where <var>s</var> is the original <link id="recursion state"/> at the beginning of the algorithm (i.e. <code><STATE/>()</code>).
		This maximizes the utility of the <link id="recursion backend"/>.
	</para>
	<para>
		Ignoring the complexity of <var>pred</var> (which is invoked once for each element in <var>g</var>), the efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are Θ(<x-var>n</x-var>+1), where <x-var>n</x-var> is the number of elements in <var>g</var>.
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <FILTER_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <FILTER_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-algorithm-filter.h/>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-lambda-ops.h/>
		#include <chaos-preprocessor-logical-bool.h/>
		#include <chaos-preprocessor-recursion-expr.h/>
		#include <chaos-preprocessor-string-core.h/>
		
		#define P1(s, elem, _) <BOOL/>(elem)
		
		<EXPR/>(<FILTER/>(
		    P1, (<STRING/>) 1 0 2 0 3, ~
		))
		// (<STRING/>) 1 2 3
		
		#if <VARIADICS/>
		
		#define P2(s, elem) <BOOL/>(elem)
		
		<EXPR/>(<FILTER/>(
		    P2, (<STRING/>) 1 0 2 0 3
		))
		// (<STRING/>) 1 2 3
		
		<EXPR/>(<FILTER/>(
		    <BOOL_/>(<ARG/>(1)),
		    (<STRING/>) 1 0 2 0 3
		))
		// (<STRING/>) 1 2 3
		
		#endif
	</listing>
	<derivative id="FILTER_ID"/>
	<derivative id="FILTER_" lang="C99"/>
	<derivative id="FILTER_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<FILTER_S/>(s, pred, g))</syntax>
		</usage>
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<FILTER_S/>(s, pred, g, ...))</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><EXPR_S/>(s)(<FILTER_S/>(s, pred, g, data))</syntax>
		</usage>
		<listing>
			#include <chaos-preprocessor-algorithm-filter.h/>
			#include <chaos-preprocessor-config.h/>
			#include <chaos-preprocessor-control-iif.h/>
			#include <chaos-preprocessor-detection-is_variadic.h/>
			#include <chaos-preprocessor-generics-core.h/>
			#include <chaos-preprocessor-recursion-basic.h/>
			#include <chaos-preprocessor-recursion-expr.h/>
			#include <chaos-preprocessor-tuple-core.h/>
			
			#if <VARIADICS/>
			
			#define PRED(s, elem) \
			    PRED_I(<OBSTRUCT/>(), <NEXT/>(s), elem) \
			    /**/
			#define PRED_I(_, s, elem) \
			    <IIF/> _(<IS_VARIADIC/>(elem))( \
			        <IS_CONS/> _( \
			            <EXPR_S/>(s) _(<FILTER_S/> _( \
			                s, PRED_INDIRECT _(), (<TUPLE/>) elem \
			            )) \
			        ), \
			        elem \
			    ) \
			    /**/
			#define PRED_INDIRECT() PRED
			
			<EXPR/>(<FILTER/>(
			    PRED,
			    (<TUPLE/>)
			        (1, 0, ((0, 0), 0), 0, (0, (0, 1), 0), 1, (1, 1))
			))
			// (<TUPLE/>) (1, (0, (0, 1), 0), 1, (1, 1))
			
			#endif
		</listing>
		<derivative id="FILTER_S_ID"/>
		<derivative id="FILTER_S_" lang="C99"/>
	</derivative>
</macro>

</header>
