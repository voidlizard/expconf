<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/algorithm/combinatorial_repeat.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that produces a combinatorial repetition of a dataset.
</overview>

<macro id="COMBINATORIAL_REPEAT" type="indirect" group="cartesian">
	<abstract>
		The <COMBINATORIAL_REPEAT/> macro generates repetitions for all possible strings (in the mathematical sense) up to the length specified by its first argument of an alphabet specified by its third argument.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<COMBINATORIAL_REPEAT/>(count, macro, g))</syntax>
		<param id="count">
			The maximum length of the strings to be generated.
			Valid values range from <code>0</code> to <LIMIT_MAG/>.
		</param>
		<param id="macro">
			The target that is to be repeated for each string.
			This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				macro(s, size, product)
			</snippet>
		</param>
		<param id="g">
			The <link id="generic data structure"/> containing the alphabet used to construct strings.
		</param>
	</usage>
	<usage lang="C99">
		<syntax><EXPR/>(<COMBINATORIAL_REPEAT/>(count, macro, g, ...))</syntax>
		<param id="count">
			The maximum length of the strings to be generated.
			Valid values range from <code>0</code> to <LIMIT_MAG/>.
		</param>
		<param id="macro">
			<para>
				The target that is to be repeated for each string.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, size, product, data<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>data</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the auxiliary data, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="g">
			The <link id="generic data structure"/> containing the alphabet used to construct strings.
		</param>
		<param id="..." optional="1">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<para>
		The <COMBINATORIAL_REPEAT/> macro itself expands to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This <link id="deferred expression"/>, when invoked with <EXPR/>, expands to the result of the repeated invocoation of the target for each string (passed as a <link id="sequence"/>) in the alphabet specified by <var>g</var> up to a maximum length of <var>count</var>.
		For example, if the alphabet is {<x-var>a</x-var>,<x-var>b</x-var>} and the maximum length of string is three, the generated strings are:
		<para>
			{<x-var>a</x-var>} {<x-var>b</x-var>}
			{<x-var>a</x-var>,<x-var>a</x-var>} {<x-var>a</x-var>,<x-var>b</x-var>} {<x-var>b</x-var>,<x-var>a</x-var>} {<x-var>b</x-var>,<x-var>b</x-var>}
			{<x-var>a</x-var>,<x-var>a</x-var>,<x-var>a</x-var>} {<x-var>a</x-var>,<x-var>a</x-var>,<x-var>b</x-var>} {<x-var>a</x-var>,<x-var>b</x-var>,<x-var>a</x-var>} {<x-var>a</x-var>,<x-var>b</x-var>,<x-var>b</x-var>}
			{<x-var>b</x-var>,<x-var>a</x-var>,<x-var>a</x-var>} {<x-var>b</x-var>,<x-var>a</x-var>,<x-var>b</x-var>} {<x-var>b</x-var>,<x-var>b</x-var>,<x-var>a</x-var>} {<x-var>b</x-var>,<x-var>b</x-var>,<x-var>b</x-var>}
		</para>
		In other words, the macro is generating Cartesian products of <var>g</var> with dimensions ranging from <code>1</code> to <var>count</var>.
		<snippet>
			#define M(s, size, product) \
			    { <SEQ_ENUMERATE/>(product) } \
			    /**/
		
			<EXPR/>(<COMBINATORIAL_REPEAT/>(
			    3, M, (<SEQ/>) (A)(B)
			))
		</snippet>
	</para>
	<para>
		The target is invoked with the current <link id="recursion state"/> (<var>s</var>), the size of a particular string (<var>size</var>), the particular string (<var>product</var>), and, if it exists, the auxiliary data (<code>__VA_ARGS__</code>).
		This target may expand to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This allows the target to recurse on itself if necessary.
	</para>
	<para>
		It is possible to omit the auxiliary data argument altogether.
		This is different than passing "nothing" as the auxiliary data.
		<snippet>
			#define D (<TUPLE/>) (a, b, c)
			
			<EXPR/>(
			    <COMBINATORIAL_REPEAT/>(3, MACRO, D,) // #1
			    <COMBINATORIAL_REPEAT/>(3, MACRO, D)  // #2
			)
		</snippet>
		The first line passes "nothing" as the auxiliary data, which causes <code>MACRO</code> to be invoked as (e.g.)...
		<snippet>MACRO(s, 3, (a)(a)(a),)</snippet>
		The second line omits the auxiliary data, which causes <code>MACRO</code> to be invoked as (e.g.)...
		<snippet>MACRO(s, 3, (a)(a)(b))</snippet>
		The fundamental difference is that, in the first line, the auxiliary data is empty (which might have a valid meaning as data), but, in the second line, <em>there is no auxiliary data</em>.
		Hence, the algorithm is overloaded on a <link id="true-optional parameter"/>.
	</para>
	<para>
		Invocations of the target are trampolined such that each invocation is invoked with <code><NEXT/>(s)</code>, where <var>s</var> is the original <link id="recursion state"/> at the beginning of the algorithm (i.e. <code><STATE/>()</code>).
		This maximizes the utility of the <link id="recursion backend"/>.
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <COMBINATORIAL_REPEAT_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <COMBINATORIAL_REPEAT_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-algorithm-combinatorial_repeat.h/>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-facilities-unbox.h/>
		#include <chaos-preprocessor-recursion-expr.h/>
		#include <chaos-preprocessor-repetition-enum.h/>
		#include <chaos-preprocessor-repetition-enum_params.h/>
		#include <chaos-preprocessor-seq-core.h/>
		#include <chaos-preprocessor-seq-elem.h/>
		
		#if <VARIADICS/>
		
		template&lt;class Obj&gt; class forward {
		    public:
		        // ...
		        #define A(s, size, product) \
		            template&lt;<ENUM_PARAMS/>(size, class T)&gt; \
		            typename result_of&lt;Obj(<ENUM/>(size, B, product))&gt;::type \
		            operator()(<ENUM/>(size, C, product)) { \
		                return obj(<ENUM_PARAMS/>(size, p)); \
		            } \
		            /**/
		        #define B(s, n, product) \
		            <UNBOX/>(<SEQ_ELEM/>(n, product)) T ## n \
		            /**/
		        #define C(s, n, product) \
		            B(s, n, product)&amp; p ## n \
		            /**/
		        <EXPR/>(<COMBINATORIAL_REPEAT/>(
		            5, A, (<SEQ/>) (.)((const))
		        ))
		        #undef A
		        #undef B
		        #undef C
		    private:
		        Obj obj;
		};
		
		#endif
	</listing>
	<derivative id="COMBINATORIAL_REPEAT_ID" lang="C99"/>
	<derivative id="COMBINATORIAL_REPEAT_" lang="C99"/>
	<derivative id="COMBINATORIAL_REPEAT_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<COMBINATORIAL_REPEAT_S/>(s, count, macro, g))</syntax>
		</usage>
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<COMBINATORIAL_REPEAT_S/>(s, count, macro, g, ...))</syntax>
		</usage>
		<derivative id="COMBINATORIAL_REPEAT_S_ID" lang="C99"/>
		<derivative id="COMBINATORIAL_REPEAT_S_" lang="C99"/>
	</derivative>
</macro>

</header>
