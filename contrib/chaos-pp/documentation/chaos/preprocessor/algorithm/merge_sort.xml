<?xml version="1.0" encoding="utf-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/algorithm/merge_sort.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that sorts a <link id="generic data structure"/>.
</overview>

<macro id="MERGE_SORT" type="indirect" group="sorting">
	<abstract>
		The <MERGE_SORT/> macro sorts its second argument according to the predicate specified by its first argument.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<MERGE_SORT/>(pred, g))</syntax>
		<param id="pred">
			<para>
				The predicate that determines the ordering between one element and another.
				This predicate must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					pred(s, x<sup>†</sup>, y<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The pseudo-parameters <var>x</var> and <var>y</var> must each be the number of parameters that corresponds to the number of sub-elements in each element of <var>g</var>.
			</para>
		</param>
		<param id="g">
			The <link id="generic data structure"/> to be sorted.
		</param>
	</usage>
	<usage lang="C99">
		<syntax><EXPR/>(<MERGE_SORT/>(pred, g, ...))</syntax>
		<param id="pred">
			<para>
				The predicate that determines the ordering between one element and another.
				This predicate must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					pred(s, x<sup>†</sup>, y<sup>†</sup>, data<sup>‡</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The pseudo-parameters <var>x</var> and <var>y</var> must each be the number of parameters that corresponds to the number of sub-elements in each element of <var>g</var>.
			</para>
			<para>
				<sup>‡</sup>
				The <var>data</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the auxiliary data, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="g">
			The <link id="generic data structure"/> to be sorted.
		</param>
		<param id="..." optional="1">
			Auxiliary data to be passed through the algorithm to the predicate.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><EXPR/>(<MERGE_SORT/>(pred, g, data))</syntax>
		<param id="pred">
			<para>
				The predicate that determines the ordering between one element and another.
				This predicate must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					pred(s, x, y, data)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The pseudo-parameters <var>x</var> and <var>y</var> must each be the number of parameters that corresponds to the number of sub-elements in each element of <var>g</var>.
			</para>
			<para>
				<sup>‡</sup>
				The <var>data</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the auxiliary data, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="g">
			The <link id="generic data structure"/> to be sorted.
		</param>
		<param id="data">
			Auxiliary data to be passed through the algorithm to the predicate.
		</param>
	</usage>
	<para>
		The <MERGE_SORT/> macro itself expands to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This <link id="deferred expression"/>, when invoked by <EXPR/>, expands to a <link id="generic data structure"/> of the same type as <var>g</var> that contains the elements of <var>g</var> sorted according to <var>pred</var>.
	</para>
	<para>
		The predicate is invoked with the current <link id="recursion state"/> (<var>s</var>), two elements of <var>g</var> (<var>x</var> and <var>y</var>), and, if it exists, the auxiliary data (<var>data</var> or <code>__VA_ARGS__</code>).
		This invocation must expand to <code>0</code>, <code>1</code>, or a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code> that expands to either <code>0</code> or <code>1</code>.
		Expansion to a <link id="deferred expression"/> allows the predicate to recurse on itself if necessary.
	</para>
	<para>
		If the predicate results in <code>1</code>, <var>x</var> is sorted to a position before <var>y</var>.
		Otherwise, <var>y</var> is sorted to a position before <var>x</var>.
		If two are equivalent according to <var>pred</var>, their sorted position relative to each other is unspecified.
		That is, the algorithm does <em>not</em> guarantee stability.
	</para>
	<para>
		In C99, it is possible to omit the auxiliary data argument altogether.
		This is different than passing "nothing" as the auxiliary data.
		<snippet>
			#define D (<TUPLE/>) (a, b, c)

			<EXPR/>(
			    <MERGE_SORT/>(PRED, D,) // #1
			    <MERGE_SORT/>(PRED, D)  // #2
			)
		</snippet>
		The first line passes "nothing" as the auxiliary data, which causes <code>PRED</code> to be invoked as (e.g.)...
		<snippet>PRED(s, a, b,)</snippet>
		The second line omits the auxiliary data, which causes <code>PRED</code> to be invoked as (e.g.)...
		<snippet>PRED(s, a, b)</snippet>
		The fundamental difference is that, in the first line, the auxiliary data is empty (which might have a valid meaning as data), but, in the second line, <em>there is no auxiliary data</em>.
		Hence, the algorithm is overloaded on a <link id="true-optional parameter"/>.
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <MERGE_SORT_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <MERGE_SORT_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-algorithm-merge_sort.h/>
		#include <chaos-preprocessor-comparison-less.h/>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-lambda-ops.h/>
		#include <chaos-preprocessor-recursion-expr.h/>
		#include <chaos-preprocessor-seq-core.h/>
		
		#define PRED(s, x, y, _) <LESS/>(x, y)
		
		<EXPR/>(<MERGE_SORT/>(
		    PRED, (<SEQ/>) (3)(5)(1)(4)(2), ~
		))
		// (<SEQ/>) (1)(2)(3)(4)(5)
		
		#if <VARIADICS/>
		
		<EXPR/>(<MERGE_SORT/>(
		    <LESS_/>(<ARG/>(1), <ARG/>(2)),
		    (<SEQ/>) (3)(5)(1)(4)(2)
		))
		// (<SEQ/>) (1)(2)(3)(4)(5)
		
		#endif
	</listing>
	<derivative id="MERGE_SORT_ID"/>
	<derivative id="MERGE_SORT_" lang="C99"/>
	<derivative id="MERGE_SORT_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<MERGE_SORT_S/>(s, pred, g))</syntax>
		</usage>
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<MERGE_SORT_S/>(s, pred, g, ...))</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><EXPR_S/>(s)(<MERGE_SORT_S/>(s, pred, g, data))</syntax>
		</usage>
		<derivative id="MERGE_SORT_S_ID"/>
		<derivative id="MERGE_SORT_S_" lang="C99"/>
	</derivative>
</macro>

</header>
