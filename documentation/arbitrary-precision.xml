<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<document id="Arbitrary-Precision Arithmetic" author="Paul Mensonides" date="2003-2005">
	<section>
		<para>
			The <link id="arbitrary-precision arithmetic"/> component supports arithmetic, relational, and equality operations on signed integers of any precision.
		</para>
	</section>
	<section id="Representation">
		<para>
			Positive <link id="arbitrary-precision values"/> are represented as a <link id="sequence"/> of base-10 digits.
			For example, the value +123 is represented as <code>(1)(2)(3)</code>.
			Negative values are represented as a parenthesized <link id="sequence"/> of base-10 digits.
			For example, the value -123 is represented as <code>((1)(2)(3))</code>.
		</para>
	</section>
	<section id="Conversion">
		<para>
			The library supplies primitives that convert between various formats.
			The first of these is <ARBITRARY_PROMOTE/> which converts a simple integer range from <code>0</code> to <LIMIT_MAG/> to an <link id="arbitrary-precision value"/> (e.g. <code><ARBITRARY_PROMOTE/>(123)</code>).
			Negative values can be specified by prefixing the number with a parenthesized negation operator (e.g. <code><ARBITRARY_PROMOTE/>((-)123)</code>).
		</para>
		<para>
			The second conversion primitive is <ARBITRARY_LITERAL/> which converts a <link id="string"/> of digits to a <link id="arbitrary-precision value"/> (e.g. <code><ARBITRARY_LITERAL/>(1 2 3)</code>).
			Negative values can be specified by again prefixing the digits with a parenthesized negation operator (e.g. <code><ARBITRARY_LITERAL/>((-)1 2 3)</code>).
		</para>
		<para>
			The third conversion primitive is <ARBITRARY_BOOL/> which converts a <link id="arbitrary-precision value"/> to a Boolean value (i.e. either <code>0</code> or <code>1</code>).
		</para>
		<para>
			The last conversion primitive is <ARBITRARY_DEMOTE/> which converts an <link id="arbitrary-precision value"/> to a simple integer (e.g. <code><ARBITRARY_DEMOTE/>((1)(2)(3))</code>).
			If the <link id="arbitrary-precision value"/> is negative, the result is prefixed with a negation operator (e.g. <code><ARBITRARY_DEMOTE/>(((1)(2)(3)))</code> expands to <code>-123</code>).
		</para>
	</section>
	<section id="Arithmetic Operators">
		<para>
			The basic arithmetic operations are all available on <link id="arbitrary-precision values"/>.
			The following table summarizes these operations and their equivalents in C or C++:
			<table>
				<row>
					<column><code><ARBITRARY_ADD/>(x, y)</code></column>
					<column type="expression"><code>x + y</code></column>
				</row>
				<row>
					<column><code><ARBITRARY_DEC/>(x)</code></column>
					<column type="expression"><code>x - 1</code></column>
				</row>
				<row>
					<column><code><ARBITRARY_DIV/>(x, y)</code></column>
					<column type="expression"><code>x / y</code></column>
				</row>
				<row>
					<column><code><ARBITRARY_INC/>(x)</code></column>
					<column type="expression"><code>x + 1</code></column>
				</row>
				<row>
					<column><code><ARBITRARY_MUL/>(x, y)</code></column>
					<column type="expression"><code>x * y</code></column>
				</row>
				<row>
					<column><code><ARBITRARY_MOD/>(x, y)</code></column>
					<column type="expression"><code>x % y</code></column>
				</row>
				<row>
					<column><code><ARBITRARY_NEG/>(x)</code></column>
					<column type="expression"><code>-x</code></column>
				</row>
				<row>
					<column><code><ARBITRARY_SUB/>(x, y)</code></column>
					<column type="expression"><code>x - y</code></column>
				</row>
			</table>
		</para>
	</section>
	<section id="Equality &amp; Relational Operators">
		<para>
			The basic equality and relation operators are provided as well.
			The following table summarizes these operations and their equivalents in C or C++.
			<table>
				<row>
					<column><code><ARBITRARY_EQUAL/>(x, y)</code></column>
					<column type="expression"><code>x == y</code></column>
				</row>
				<row>
					<column><code><ARBITRARY_GREATER/>(x, y)</code></column>
					<column type="expression"><code>x &gt; y</code></column>
				</row>
				<row>
					<column><code><ARBITRARY_GREATER_EQUAL/>(x, y)</code></column>
					<column type="expression"><code>x &gt;= y</code></column>
				</row>
				<row>
					<column><code><ARBITRARY_LESS/>(x, y)</code></column>
					<column type="expression"><code>x &lt; y</code></column>
				</row>
				<row>
					<column><code><ARBITRARY_LESS_EQUAL/>(x, y)</code></column>
					<column type="expression"><code>x &lt;= y</code></column>
				</row>
				<row>
					<column><code><ARBITRARY_NOT_EQUAL/>(x, y)</code></column>
					<column type="expression"><code>x != y</code></column>
				</row>
			</table>
		</para>
	</section>
</document>
