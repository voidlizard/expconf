<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<document id="Tuples" author="Paul Mensonides" date="2003-2005">
	<section>
		<para>
			A <link id="tuple"/> is a parenthesized series of comma-separated elements.
			For example,
			<snippet>
				(a, b, c)
			</snippet>
			is a <link id="tuple"/> containing three elements, <code>a</code>, <code>b</code>, and <code>c</code>.
		</para>
		<para>
			<link id="Tuples"/> are fast and, for the most part, easy to use.
			However, in C (prior to C99) and C++, access to a <link id="tuple"/> requires knowledge of its size.
			Even in C99, several <link id="tuple"/>-specific primitives--such as <TUPLE_REVERSE/>--require the size of the <link id="tuple"/> as an argument.
			(Note that it is possible to deduce the size of a <link id="tuple"/> in C99.)
		</para>
		<para>
			<link id="Tuples"/> provide random access to their contained elements.
		</para>
		<para>
			In C (prior to C99) and C++, <link id="tuples"/> can contain only up to <LIMIT_TUPLE/> elements.
			In C99, <link id="tuples"/> can contain any number of elements, but random access to the contained elements is still provided only for elements with indices ranging from <code>0</code> to <LIMIT_TUPLE/> - 1.
			(Several other <link id="tuple"/>-specific primitives--such as <TUPLE_REVERSE/>--are also limited in this way.)
		</para>
		<para>
			<link id="Tuples"/> cannot contain elements with any arity other than unary even in C99.
			However, they can contain nested <link id="tuples"/> or other data structures that contain multiple elements.
			For example, the following is a <link id="tuple"/> of <link id="lists"/>:
			<snippet>
				( (a, (b, (c, ...))), (x, (y, (z, ...))) )
			</snippet>
		</para>
		<para>
			The <link id="tuple"/>-specific primitives are located in the <code>chaos/preprocessor/tuple</code> subdirectory.
		</para>
	</section>
	<section id="Nil Tuples">
		<para>
			Because <link id="tuples"/> have the syntactic form of an argument list, there is an inherent ambiguity in the representation of a nil <link id="tuple"/>.
			Consider the macro the following macro definitions and invocations:
			<snippet>
				#define A()
				#define B(x)
				
				A()
				B(1)
			</snippet>
			The <code>A</code> macro is defined as nullary, while the <code>B</code> macro is defined as unary.
			When <code>A</code> is invoked, it is invoked with the first of two forms of nil <link id="tuple"/> used by the library--nullary parentheses, <code>()</code>.
			When <code>B</code> is invoked, it is invoked with a <link id="tuple"/> that is clearly unary.
			However, with the introduction of placemarkers in C99, the distinction is no longer clear.
			For example,
			<snippet>
				B()
			</snippet>
			Here, <code>B</code> is invoked with what appears to be, but isn't, a nil <link id="tuple"/>.
			It is invoked with a unary <link id="tuple"/> whose only element is empty.
			(This is why <code><IS_UNARY/>(())</code> expands to <code>1</code> in C99.)
			Fundamentally, this is no different than a <link id="tuple"/> of greater arity with empty elements.
			<snippet>
				(,,)
			</snippet>
		</para>
		<para>
			Several problems arise from this situation when using <link id="tuples"/> as data structures.
			The first is that there is no general way of detecting the difference between <code>()</code> and <code>(1)</code>.
			It is possible to get fairly close in various ways by restricting the types of elements, but a general solution is impossible.
		</para>
		<para>
			Even if such detection <em>was</em> possible, another problem surfaces.
			Consider again the <code>(,,)</code> <link id="tuple"/>, and consider an algorithm that operates on each element of a <link id="tuple"/>.
			If the algorithm was to attempt to individually process elements one-by-one, it might use <TUPLE_HEAD/> and <TUPLE_TAIL/>.
			Everything is fine for <code><TUPLE_TAIL/>((,,))</code> (which yields <code>(,)</code>).
			However, <code><TUPLE_TAIL/>((,))</code> yields <code>()</code> (i.e. the theoretical nil <link id="tuple"/>), and an element has been silently skipped.
		</para>
		<para>
			The underlying problem is that emptiness (or "nothing") is a useful and perfectly valid form of data in its own right.
		</para>
		<para>
			As a consequence, algorithms and primitives that operate on <link id="tuples"/> <em>algorithmically</em> need to use a distinct representation for nil that has no ambiguity.
			This representation is <code><TUPLE_NIL/>()</code> which simply expands to nothing.
			This model always treats <code>()</code> as a unary <link id="tuple"/>, and <code><TUPLE_TAIL/>(())</code> expands to nothing.
		</para>
		<para>
			Note that this issue arises only with algorithms and primitives that operate on <link id="tuples"/> algorithmically, and <link id="tuples"/> can only be operated on algorithmically in C99.
			Thus, all <link id="tuple"/>-specific primitives present in C (prior to C99) and C++ operate on <code>()</code> nil <link id="tuples"/>.
			(For compatibility, these primitives are semantically identical in C99.)
		</para>
		<para>
			It is sometimes necessary to convert an empty nil <link id="tuple"/> to a <code>()</code> nil <link id="tuple"/>.
			One such case is when the <link id="tuple"/> is to be directly used as an argument list.
			This can be accomplished with code such as the following:
			<snippet>
				<TUPLE_AS_ARGS/>((a, b, c)) // (a, b, c)
				<TUPLE_AS_ARGS/>()          // ()
			</snippet>
			However, no conversion in the other direction is possible.
		</para>
	</section>
	<section id="Using Tuples as Generic Data Structures">
		<para>
			In C99, <link id="tuples"/> can be used as <link id="generic data structures"/> if the <chaos-preprocessor-tuple-core.h/> header is included.
			For example,
			<snippet>
				#define MACRO(s, x, _) &lt; x &gt;
				
				<EXPR/>(<FOR_EACH/>(
				    MACRO, (<TUPLE/>) (x, y, z), ~
				))
				// &lt; x &gt; &lt; y &gt; &lt; z &gt;
			</snippet>
		</para>
		<para>
			(Note that <link id="tuples"/> used as generic data structures use the empty nil <link id="tuple"/> representation.)
		</para>
	</section>
</document>
