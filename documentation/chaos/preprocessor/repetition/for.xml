<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/repetition/for.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines a predicated repetition algorithm.
</overview>

<macro id="FOR" type="indirect" group="repetition">
	<abstract>
		The <FOR/> macro is a predicated repetition construct.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<FOR/>(pred, op, macro, ...))</syntax>
		<param id="pred">
			<para>
				The predicate to be used to determine whether the algorithm should continue.
				This predicate must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					pred(s, state<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>state</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the initial state, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="op">
			<para>
				The operation to be used to iterate the state.
				This operation must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					op(s, state<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>state</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the initial state, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="macro">
			<para>
				The target to be repeated.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, state<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>state</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the initial state, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="..." optional="1">
			The initial state.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><EXPR/>(<FOR/>(pred, op, macro, state))</syntax>
		<param id="pred">
			The predicate to be used to determine whether the algorithm should continue.
			This predicate must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				pred(s, state)
			</snippet>
		</param>
		<param id="op">
			The operation to be used to iterate the state.
			This operation must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				op(s, state)
			</snippet>
		</param>
		<param id="macro">
			The target to be repeated.
			This target must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				macro(s, state)
			</snippet>
		</param>
		<param id="state">
			The initial state.
		</param>
	</usage>
	<para>
		The <FOR/> macro itself expands to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This <link id="deferred expression"/>, when invoked by <EXPR/>, expands to the result of repeating the target while iterating the state until the predicate expands to <code>0</code>.
		This is illustrated by the following pseudo-code:
		<snippet>
			macro(s, state)  macro(s, op(s, state)) ... macro(s, op(s, ... op(s, state) ... ))
		</snippet>
	</para>
	<para>
		The predicate, operation, and target are all invoked with the current <link id="recursion state"/> (<var>s</var>) and the current state (<var>state</var> or <code>__VA_ARGS__</code>).
		The predicate must expand to <code>0</code>, <code>1</code>, or a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code> that expands to either <code>0</code> or <code>1</code>.
		If the predicate ultimately expands to <code>0</code>, the algorithm terminates.
		Otherwise, the target is invoked with the current state, the operation is applied to the current state to yield a new state, and the algorithm continues.
		Both the target and the operation may expand to <link id="deferred expressions"/> in terms of <code><NEXT/>(s)</code>.
		Expansion to a <link id="deferred expression"/> allows the predicate, operation, and target to recurse on themselves if necessary.
	</para>
	<para>
		Invocations of the target (but not the predicate and operation) are trampolined such that each invocation is invoked with <code><NEXT/>(<NEXT/>(s))</code>, where <var>s</var> is the original <link id="recursion state"/> at the beginning of the algorithm (i.e. <code><STATE/>()</code>).
		This maximizes the utility of the <link id="recursion backend"/>.
	</para>
	<para>
		Ignoring the complexity of <var>pred</var>, <var>op</var>, and <var>macro</var> (each of which is invoked once for each variation of the state), each iteration of the state requires only a single <link id="recursion step"/>.		
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <FOR_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <FOR_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-arithmetic-dec.h/>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-lambda-ops.h/>
		#include <chaos-preprocessor-logical-bool.h/>
		#include <chaos-preprocessor-recursion-expr.h/>
		#include <chaos-preprocessor-repetition-for.h/>
		
		#define PRED(s, x) <BOOL/>(x)
		#define OP(s, x) <DEC/>(x)
		#define MACRO(s, x) { x }
		
		<EXPR/>(<FOR/>(
		    PRED, OP, MACRO, 3
		))
		// { 3 } { 2 } { 1 }
		
		#if <VARIADICS/>
		
		??=include <PLACEHOLDERS/>(1)
		
		<EXPR/>(<FOR/>(
		    <BOOL_/>(_1), <DEC_/>(_1),
		    <LAMBDA/>({) _1 },
		    3
		))
		// { 3 } { 2 } { 1 }
		
		??=include <PLACEHOLDERS/>(0)
		
		#endif
	</listing>
	<derivative id="FOR_ID"/>
	<derivative id="FOR_" lang="C99"/>
	<derivative id="FOR_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<FOR_S/>(s, pred, op, macro, ...))</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><EXPR_S/>(s)(<FOR_S/>(s, pred, op, macro, state))</syntax>
		</usage>
		<derivative id="FOR_S_ID"/>
		<derivative id="FOR_S_" lang="C99"/>
	</derivative>
</macro>

</header>
