<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/repetition/repeat_from_to.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that repeats a user-specified target for each number in a specified range.
</overview>

<macro id="REPEAT_FROM_TO" type="indirect" group="repetition">
	<abstract>
		The <REPEAT_FROM_TO/> macro repeats its third argument for each number in the range specified by its first two arguments.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<REPEAT_FROM_TO/>(from, to, macro))</syntax>
		<param id="from">
			The lower bound of the range of numbers for which <var>macro</var> is to be repeated.
			Valid values range from <code>0</code> to <var>to</var>.
		</param>
		<param id="to">
			The upper bound of the range of numbers for which <var>macro</var> is to be repeated.
			Valid values range from <var>from</var> to <LIMIT_MAG/>.
		</param>
		<param id="macro">
			The target that is to be repeated.
			This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				macro(s, n)
			</snippet>
		</param>
	</usage>
	<usage lang="C99">
		<syntax><EXPR/>(<REPEAT_FROM_TO/>(from, to, macro, ...))</syntax>
		<param id="from">
			The lower bound of the range of numbers for which <var>macro</var> is to be repeated.
			Valid values range from <code>0</code> to <var>to</var>.
		</param>
		<param id="to">
			The upper bound of the range of numbers for which <var>macro</var> is to be repeated.
			Valid values range from <var>from</var> to <LIMIT_MAG/>.
		</param>
		<param id="macro">
			<para>
				The target that is to be repeated.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, n, data<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>data</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the auxiliary data, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="..." optional="1">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><EXPR/>(<REPEAT_FROM_TO/>(from, to, macro, data))</syntax>
		<param id="from">
			The lower bound of the range of numbers for which <var>macro</var> is to be repeated.
			Valid values range from <code>0</code> to <var>to</var>.
		</param>
		<param id="to">
			The upper bound of the range of numbers for which <var>macro</var> is to be repeated.
			Valid values range from <var>from</var> to <LIMIT_MAG/>.
		</param>
		<param id="macro">
			The target that is to be repeated.
			This target must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				macro(s, n, data)
			</snippet>
		</param>
		<param id="data">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<para>
		The <REPEAT_FROM_TO/> macro itself expands to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This <link id="deferred expression"/>, when invoked by <EXPR/>, expands to the result of repeating the target for each number ranging from <var>from</var> to <var>to</var> - 1.
		This is illustrated by the following pseudo-code:
		<snippet>
			macro(s, from, data) macro(s, from + 1, data) ... macro(s, to - 1, data)
		</snippet>
	</para>
	<para>
		The target is invoked for each number in the half-open range [<var>from</var>, <var>to</var>) with the current <link id="recursion state"/> (<var>s</var>), the current repetition (<var>n</var>), and, if it exists, the auxiliary data (<var>data</var> or <code>__VA_ARGS__</code>).
		This target may expand to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This allows the target to recurse on itself if necessary.
	</para>
	<para>
		In C99, it is possible to omit the auxiliary data argument altogether.
		This is different than passing "nothing" as the auxiliary data.
		<snippet>
			<EXPR/>(
			    <REPEAT_FROM_TO/>(5, 10, MACRO,) // #1
			    <REPEAT_FROM_TO/>(5, 10, MACRO)  // #2
			)
		</snippet>
		The first line passes "nothing" as the auxiliary data, which causes <code>MACRO</code> to be invoked as (e.g.)...
		<snippet>MACRO(s, 5,)</snippet>
		The second line omits the auxiliary data, which causes <code>MACRO</code> to be invoked as (e.g.)...
		<snippet>MACRO(s, 5)</snippet>
		The fundamental difference is that, in the first line, the auxiliary data is empty (which might have a valid meaning as data), but, in the second line, <em>there is no auxiliary data</em>.
		Hence, the algorithm is overloaded on a <link id="true-optional parameter"/>.
	</para>
	<para>
		Invocations of the target are trampolined such that each invocation is invoked with <code><NEXT/>(s)</code>, where <var>s</var> is the original <link id="recursion state"/> at the beginning of the algorithm (i.e. <code><STATE/>()</code>).
		This maximizes the utility of the <link id="recursion backend"/>.
	</para>
	<para>
		Ignoring the complexity of <var>macro</var> (which is invoked exactly <var>to</var> - <var>from</var> times), the efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are Θ(<x-var>t</x-var>-<x-var>f</x-var>+1), where <x-var>t</x-var> is <var>to</var> and <x-var>f</x-var> is <var>from</var>.
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <REPEAT_FROM_TO_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <REPEAT_FROM_TO_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-recursion-expr.h/>
		#include <chaos-preprocessor-repetition-repeat_from_to.h/>
		
		#define MACRO(s, n, _) n
		
		<EXPR/>(<REPEAT_FROM_TO/>(
		    2, 8, MACRO, ~
		))
		// 2 3 4 5 6 7
	</listing>
	<derivative id="REPEAT_FROM_TO_ID"/>
	<derivative id="REPEAT_FROM_TO_" lang="C99"/>
	<derivative id="REPEAT_FROM_TO_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<REPEAT_FROM_TO_S/>(s, from, to, macro))</syntax>
		</usage>
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<REPEAT_FROM_TO_S/>(s, from, to, macro, ...))</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><EXPR_S/>(s)(<REPEAT_FROM_TO_S/>(s, from, to, macro, data))</syntax>
		</usage>
		<derivative id="REPEAT_FROM_TO_S_ID"/>
		<derivative id="REPEAT_FROM_TO_S_" lang="C99"/>
	</derivative>
</macro>

</header>
