<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/repetition/delineate_shifted.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that delineates a user-specified target a specified number of times.
</overview>

<macro id="DELINEATE_SHIFTED" type="indirect" group="delineation">
	<abstract>
		The <DELINEATE_SHIFTED/> macro delineates its third argument one less time than the number specified by its first argument with the delineator specified by its second argument between each repetition.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<DELINEATE_SHIFTED/>(count, sep, macro))</syntax>
		<param id="count">
			One greater than the number of times that <var>macro</var> is to be repeated.
			Valid values range from <code>0</code> to <LIMIT_MAG/>.
		</param>
		<param id="sep">
			The delineator to be situated between each repetition of <var>macro</var>.
			This delineator must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				sep()
			</snippet>
		</param>
		<param id="macro">
			The target that is to be repeated.
			This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				macro(s, n)
			</snippet>
		</param>
	</usage>
	<usage lang="C99">
		<syntax><EXPR/>(<DELINEATE_SHIFTED/>(count, sep, macro, ...))</syntax>
		<param id="count">
			One greater than the number of times that <var>macro</var> is to be repeated.
			Valid values range from <code>0</code> to <LIMIT_MAG/>.
		</param>
		<param id="sep">
			The delineator to be situated between each repetition of <var>macro</var>.
			This delineator must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				sep()
			</snippet>
		</param>
		<param id="macro">
			<para>
				The target that is to be repeated.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, n, data<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>data</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the auxiliary data, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="..." optional="1">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><EXPR/>(<DELINEATE_SHIFTED/>(count, sep, macro, data))</syntax>
		<param id="count">
			One greater than the number of times that <var>macro</var> is to be repeated.
			Valid values range from <code>0</code> to <LIMIT_MAG/>.
		</param>
		<param id="sep">
			The delineator to be situated between each repetition of <var>macro</var>.
			This delineator must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				sep()
			</snippet>
		</param>
		<param id="macro">
			The target that is to be repeated.
			This target must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				macro(s, n, data)
			</snippet>
		</param>
		<param id="data">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<para>
		The <DELINEATE_SHIFTED/> macro itself expands to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This <link id="deferred expression"/>, when invoked by <EXPR/>, expands to the result of delineating the target with <var>sep</var> <var>count</var> - 1 times.
		This is illustrated by the following pseudo-code:
		<snippet>
			macro(s, 1, data) sep() macro(s, 2, data) sep() ... macro(s, count - 1, data)
		</snippet>
	</para>
	<para>
		The target is invoked repeatedly (from <code>1</code> to <var>count</var> - 1) with the current <link id="recursion state"/> (<var>s</var>), the current repetition (<var>n</var>), and, if it exists, the auxiliary data (<var>data</var> or <code>__VA_ARGS__</code>).
		This target may expand to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This allows the target to recurse on itself if necessary.
	</para>
	<para>
		In C99, it is possible to omit the auxiliary data argument altogether.
		This is different than passing "nothing" as the auxiliary data.
		<snippet>
			<EXPR/>(
			    <DELINEATE_SHIFTED/>(10, SEP, MACRO,) // #1
			    <DELINEATE_SHIFTED/>(10, SEP, MACRO)  // #2
			)
		</snippet>
		The first line passes "nothing" as the auxiliary data, which causes <code>MACRO</code> to be invoked as (e.g.)...
		<snippet>MACRO(s, 1,)</snippet>
		The second line omits the auxiliary data, which causes <code>MACRO</code> to be invoked as (e.g.)...
		<snippet>MACRO(s, 1)</snippet>
		The fundamental difference is that, in the first line, the auxiliary data is empty (which might have a valid meaning as data), but, in the second line, <em>there is no auxiliary data</em>.
		Hence, the algorithm is overloaded on a <link id="true-optional parameter"/>.
	</para>
	<para>
		Invocations of the target are trampolined such that each invocation is invoked with <code><NEXT/>(s)</code>, where <var>s</var> is the original <link id="recursion state"/> at the beginning of the algorithm (i.e. <code><STATE/>()</code>).
		This maximizes the utility of the <link id="recursion backend"/>.
	</para>
	<para>
		Ignoring the complexity of <var>macro</var> (which is invoked exactly <var>count</var> - 1 times), the efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are Θ(<x-var>n</x-var>), where <x-var>n</x-var> is <var>count</var>.
	</para>
	<para>
		An invocation of the delineator, <var>sep</var>, is placed between each invocation of the target.
		This is a nullary invocation that is not intended to be complex--it is prohibited from using the <link id="recursion backend"/>.
		Typically, the <var>sep</var> argument is <EMPTY/> (which makes the function of this macro identical to <REPEAT_SHIFTED/>), <COMMA/> (which makes the function of this macro identical to <ENUM_SHIFTED/>), or a use of <IDENTITY/> for nearly everything else.
		It is also possible, though uncommon, to use <LPAREN/>, <RPAREN/>, or some other nullary macro.
	</para>
	<para>
		This macro differs from <DELINEATE/> simply by omitting the first repetition which can be useful in many contexts.
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <DELINEATE_SHIFTED_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <DELINEATE_SHIFTED_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-cat.h/>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-facilities-empty.h/>
		#include <chaos-preprocessor-facilities-identity.h/>
		#include <chaos-preprocessor-lambda-ops.h/>
		#include <chaos-preprocessor-punctuation-comma.h/>
		#include <chaos-preprocessor-recursion-expr.h/>
		#include <chaos-preprocessor-repetition-delineate_shifted.h/>
		
		#define MACRO(s, n, var) var ## n
		
		<EXPR/>(<DELINEATE_SHIFTED/>(
		    3, <EMPTY/>, MACRO, x
		))
		// x1 x2
		
		<EXPR/>(<DELINEATE_SHIFTED/>(
		    3, <COMMA/>, MACRO, y
		))
		// y1, y2
		
		<EXPR/>(<DELINEATE_SHIFTED/>(
		    3, <IDENTITY/>(+), MACRO, z
		))
		// z1 + z2
		
		#if <VARIADICS/>
		
		<EXPR/>(<DELINEATE_SHIFTED/>(
		    3, <COMMA/>,
		    <PRIMITIVE_CAT_/>(class T, <ARG/>(1))
		))
		// class T2, class T3
		
		#endif
	</listing>
	<derivative id="DELINEATE_SHIFTED_ID"/>
	<derivative id="DELINEATE_SHIFTED_" lang="C99"/>
	<derivative id="DELINEATE_SHIFTED_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<DELINEATE_SHIFTED_S/>(s, count, sep, macro))</syntax>
		</usage>
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<DELINEATE_SHIFTED_S/>(s, count, sep, macro, ...))</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><EXPR_S/>(s)(<DELINEATE_SHIFTED_S/>(s, count, sep, macro, data))</syntax>
		</usage>
		<derivative id="DELINEATE_SHIFTED_S_ID"/>
		<derivative id="DELINEATE_SHIFTED_S_" lang="C99"/>
	</derivative>
</macro>

</header>
