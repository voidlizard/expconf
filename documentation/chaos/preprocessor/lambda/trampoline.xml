<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/lambda/trampoline.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines a macro used to abstract the difference between the trampolined invocation of a macro and a <link id="λ expression"/>.
</overview>

<macro id="TRAMPOLINE" group="invocation">
	<abstract>
		The <TRAMPOLINE/> macro abstracts the difference between a trampolined invocation of a macro and a <link id="λ expression"/>.
	</abstract>
	<usage lang="C99">
		<syntax><TRAMPOLINE/>(x)()(s, x, ...)</syntax>
		<param id="x">
			<para>
				The macro or <link id="λ expression"/> to be invoked.
				If this argument is a macro, it must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, args<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>args</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in <code>__VA_ARGS__</code> after <link id="intermediate"/> expansion.
			</para>
		</param>
		<param id="s">
			The <link id="recursion state"/> in terms of which the resulting <link id="obstructed expression"/> is to be generated.
		</param>
		<param id="..." optional="1">
			The <link id="intermediate"/> argument or arguments that are to comprise the trailing arguments passed to <var>x</var>.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><TRAMPOLINE/>(x)()(s, x, im)</syntax>
		<param id="x">
			<para>
				The macro to be invoked.
				This argument must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, args<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>args</var> pseudo-parameter must be the number of parameters that corresponds to the number of arguments in <var>im</var> after <link id="intermediate"/> expansion.
			</para>
		</param>
		<param id="s">
			The <link id="recursion state"/> in terms of which the resulting <link id="obstructed expression"/> is to be generated.
		</param>
		<param id="im">
			The <link id="intermediate"/> argument that is to comprise the trailing arguments passed to <var>x</var>.
		</param>
	</usage>
	<para>
		This macro expands to an <link id="obstructed expression"/> in terms of <var>s</var> that contains an invocation of <var>x</var> (regardless of whether <var>x</var> is a macro name or a <link id="λ expression"/>).
		It also allows this <link id="obstructed expression"/>, when fully invoked, to expand to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
	</para>
	<para>
		Normal usage consists of invoking <TRAMPOLINE/> without the trailing invocations, passing that result around, and finishing the invocation at another time.
		This avoids repeatedly detecting the difference between a macro name and a <link id="λ expression"/>.
		<snippet>
			#define MACRO(s, x) MACRO_I(s, x, <TRAMPOLINE/>(x))
			#define MACRO_I(s, x, _x) _x()(s, x, ~)
		</snippet>
	</para>
	<para>
		An algorithm trampolines the invocation of a macro (or <link id="λ expression"/>) if the entire algorithm is unrolled prior the actual invocation of that macro.
		Each macro is invoked with the same <link id="recursion state"/>, thus minimizing recursion depth and maximizing the utility of the <link id="recursion backend"/>.
	</para>
	<para>
		This macro may not be used when <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-arithmetic-dec.h/>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-control-if.h/>
		#include <chaos-preprocessor-lambda-ops.h/>
		#include <chaos-preprocessor-lambda-trampoline.h/>
		#include <chaos-preprocessor-punctuation-comma.h/>
		#include <chaos-preprocessor-punctuation-comma_if.h/>
		#include <chaos-preprocessor-recursion-basic.h/>
		#include <chaos-preprocessor-recursion-expr.h/>
		#include <chaos-preprocessor-tuple-eat.h/>
		
		#if <VARIADICS/>
		
		#define REPEAT(count, macro, ...) \
		    REPEAT_S(<STATE/>(), count, macro, __VA_ARGS__) \
		    /**/
		#define REPEAT_S(s, count, macro, ...) \
		    <EXPR_S/>(s)(REPEAT_I( \
		        <NEXT/>(s), <NEXT/>(s), count, \
		        macro, <TRAMPOLINE/>(macro), (__VA_ARGS__) \
		    )) \
		    /**/
		
		#else /* <VARIADICS/> */
		
		#define REPEAT(count, macro, data) \
		    REPEAT_S(<STATE/>(), count, macro, data) \
		    /**/
		#define REPEAT_S(s, count, macro, data) \
		    <EXPR_S/>(s)(REPEAT_I( \
		        <NEXT/>(s), <NEXT/>(s), count, \
		        macro, <TRAMPOLINE/>(macro), (data) \
		    )) \
		    /**/
		
		#endif /* <VARIADICS/> */
		
		#define REPEAT_INDIRECT() REPEAT_I
		#define REPEAT_I(s, o, count, macro, _m, pd) \
		    <IF/>(count)( \
		        REPEAT_II, <TUPLE_EAT/>(7) \
		    )( \
		        <OBSTRUCT/>(), s, o, \
		        <DEC/>(count), macro, _m, pd \
		    ) \
		    /**/
		#define REPEAT_II(_, s, o, count, macro, _m, pd) \
		    <EXPR_S/>(s) _(REPEAT_INDIRECT _()( \
		        <NEXT/>(s), o, count, macro, _m, pd \
		    )) \
		    _m()(o, macro, count <COMMA/>() <REM/> pd) \
		    /**/
		
		#define MACRO(s, n, id) <COMMA_IF/>(n) id ## n
		
		<EXPR/>(REPEAT(3, MACRO, class T))
		// class T0, class T1, class T2
		
		#if <VARIADICS/>
		
		??=include <PLACEHOLDERS/>(1)
		
		<EXPR/>(REPEAT(
		    3,
		    <COMMA_IF_/>(_1) <PRIMITIVE_CAT_/>(class T, _1),
		))
		// class T0, class T1, class T2
		
		??=include <PLACEHOLDERS/>(0)
		
		#endif
	</listing>
	<derivative id="TRAMPOLINE_ID"/>
	<derivative id="TRAMPOLINE_" lang="C99"/>
</macro>

</header>
