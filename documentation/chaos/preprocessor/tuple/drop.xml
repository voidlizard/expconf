<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/tuple/drop.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that yields the remainder of a <link id="tuple"/> after removing a user-specified number of elements.
</overview>

<macro id="TUPLE_DROP" type="indirect" group="range">
	<abstract>
		The <TUPLE_DROP/> macro removes the number of elements specified by its first argument from the head of its second argument.
	</abstract>
	<usage lang="C99">
		<syntax><TUPLE_DROP/>(n, tuple)</syntax>
		<param id="n">
			The number of elements to be removed.
			Valid values range from <code>0</code> to <code><TUPLE_SIZE/>(tuple)</code>.
		</param>
		<param id="tuple" optional="1">
			The <link id="tuple"/> from which elements are to be removed.
		</param>
	</usage>
	<para>
		This macro expands to a <link id="tuple"/> containing all but the first <var>n</var> elements of <var>tuple</var>.
	</para>
	<para>
		The efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are <assoc id="complexity/drop.gif">Î˜</assoc>, where <x-var>n</x-var> is <var>n</var>.
	</para>
	<para>
		This macro operates on the nil <link id="tuple"/> representation used by the core <link id="tuple"/> operations defined in <chaos-preprocessor-tuple-core.h/>.
		Specifically, <code>()</code> is a one-element <link id="tuple"/>, not a zero-element <link id="tuple"/>.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <TUPLE_DROP_BYPASS/> must be used instead.
	</para>
	<listing>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-tuple-drop.h/>
		
		#if <VARIADICS/>
		
		<TUPLE_DROP/>(
		    12,
		    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)
		)
		// (m, n, o, p, q, r, s, t, u, v, w, x, y, z)
		
		#endif
	</listing>
	<derivative id="TUPLE_DROP_ID" lang="C99"/>
	<derivative id="TUPLE_DROP_" lang="C99"/>
	<derivative id="TUPLE_DROP_BYPASS">
		<usage lang="C99">
			<syntax><TUPLE_DROP_BYPASS/>(s, n, tuple)</syntax>
		</usage>
		<derivative id="TUPLE_DROP_BYPASS_ID" lang="C99"/>
		<derivative id="TUPLE_DROP_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
