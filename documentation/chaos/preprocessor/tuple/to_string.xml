<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/tuple/to_string.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines a macro that converts a <link id="tuple"/> to a <link id="string"/>.
</overview>

<macro id="TUPLE_TO_STRING" type="indirect" group="conversion(string-tuple) conversion(tuple)">
	<abstract>
		The <TUPLE_TO_STRING/> macro converts a <link id="tuple"/> to a <link id="string"/>.
	</abstract>
	<usage>
		<syntax><TUPLE_TO_STRING/>(size, tuple)</syntax>
		<param id="size">
			The size of the <link id="tuple"/> to be converted.
			Valid values range from <code>0</code> to <LIMIT_TUPLE/>.
		</param>
		<param id="tuple">
			The <link id="tuple"/> to be converted.
		</param>
	</usage>
	<para>
		This macro expands to a <link id="string"/> containing the elements of <var>tuple</var>.
	</para>
	<para>
		A <link id="string"/> may only contain letters, digits, and underscores.
		This macro makes no attempt to verify that the resulting <link id="string"/> is actually a valid <link id="string"/>.
		<snippet>
			<TUPLE_TO_STRING/>(2, (+, -)) // invalid
		</snippet>
	</para>
	<x-reference id="CAST"/>
	<listing>
		#include <chaos-preprocessor-tuple-to_string.h/>
		
		#define DATA() (x, y, z)
		
		<TUPLE_TO_STRING/>(3, DATA()) // x y z
	</listing>
	<derivative id="TUPLE_TO_STRING_ID"/>
	<derivative id="TUPLE_TO_STRING_" lang="C99"/>
</macro>

<macro id="TUPLE_TO_STRING_ALT" type="indirect" group="conversion(string-tuple) conversion(tuple)">
	<abstract>
		The <TUPLE_TO_STRING_ALT/> macro converts a <link id="tuple"/> to a <link id="string"/>.
	</abstract>
	<usage lang="C99">
		<syntax><TUPLE_TO_STRING_ALT/>(tuple)</syntax>
		<param id="tuple" optional="1">
			The <link id="tuple"/> to be converted.
		</param>
	</usage>
	<para>
		This macro expands to a <link id="string"/> containing the elements of <var>tuple</var>.
	</para>
	<para>
		The efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are <assoc id="complexity/to_string_alt.gif">Θ</assoc>, where <x-var>n</x-var> is the number of elements in <var>tuple</var> and <x-var>t<sub>ω</sub></x-var> is <LIMIT_TUPLE/>.
	</para>
	<para>
		This macro operates on the nil <link id="tuple"/> representation used by the core <link id="tuple"/> operations defined in <chaos-preprocessor-tuple-core.h/>.
		Specifically, <code>()</code> is a one-element <link id="tuple"/>, not a zero-element <link id="tuple"/>.
	</para>
	<para>
		A <link id="string"/> may only contain letters, digits, and underscores.
		This macro makes no attempt to verify that the resulting <link id="string"/> is actually a valid <link id="string"/>.
		<snippet>
			<TUPLE_TO_STRING_ALT/>((+, -)) // invalid
		</snippet>
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <TUPLE_TO_STRING_ALT_BYPASS/> must be used instead.
	</para>
	<x-reference id="CAST"/>
	<derivative id="TUPLE_TO_STRING_ALT_ID" lang="C99"/>
	<derivative id="TUPLE_TO_STRING_ALT_" lang="C99"/>
	<derivative id="TUPLE_TO_STRING_ALT_BYPASS">
		<usage lang="C99">
			<syntax><TUPLE_TO_STRING_ALT_BYPASS/>(s, tuple)</syntax>
		</usage>
		<derivative id="TUPLE_TO_STRING_ALT_BYPASS_ID" lang="C99"/>
		<derivative id="TUPLE_TO_STRING_ALT_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
