<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/tuple/remove.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that removes an element from a <link id="tuple"/>.
</overview>

<macro id="TUPLE_REMOVE" type="indirect" group="removal">
	<abstract>
		The <TUPLE_REMOVE/> macro removes the element at the index specified by its first argument from its second argument.
	</abstract>
	<usage lang="C99">
		<syntax><TUPLE_REMOVE/>(i, tuple)</syntax>
		<param id="i">
			The zero-based index of the element to be removed.
			Valid values range from <code>0</code> to <code><TUPLE_SIZE/>(tuple)</code> - 1.
		</param>
		<param id="tuple">
			The <link id="tuple"/> from which an element is to be removed.
		</param>
	</usage>
	<para>
		This macro expands to a <link id="tuple"/> containing all of the elements of <var>tuple</var> except the <var>i</var>-th element.
	</para>
	<para>
		The efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are <assoc id="complexity/remove.gif">Î˜</assoc>, where <x-var>n</x-var> is <var>i</var>.
	</para>
	<para>
		This macro operates on the nil <link id="tuple"/> representation used by the core <link id="tuple"/> operations defined in <chaos-preprocessor-tuple-core.h/>.
		Specifically, <code>()</code> is a one-element <link id="tuple"/>, not a zero-element <link id="tuple"/>.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <TUPLE_REMOVE_BYPASS/> must be used instead.
	</para>
	<listing>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-tuple-remove.h/>
		
		#if <VARIADICS/>
		
		<TUPLE_REMOVE/>(0, (a, b, c)) // (b, c)
		<TUPLE_REMOVE/>(2, (a, b, c)) // (a, b)
		<TUPLE_REMOVE/>(0, (a))       //
		
		#endif
	</listing>
	<derivative id="TUPLE_REMOVE_ID" lang="C99"/>
	<derivative id="TUPLE_REMOVE_" lang="C99"/>
	<derivative id="TUPLE_REMOVE_BYPASS">
		<usage lang="C99">
			<syntax><TUPLE_REMOVE_BYPASS/>(s, i, tuple)</syntax>
		</usage>
		<derivative id="TUPLE_REMOVE_BYPASS_ID" lang="C99"/>
		<derivative id="TUPLE_REMOVE_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
