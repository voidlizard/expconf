<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/control/x/while.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an <link id="exponential"/> looping construct which can be <link id="parametrically resumed"/>.
</overview>

<macro id="WHILE_X" type="indirect" group="looping">
	<abstract>
		The <WHILE_X/> macro iterates a state with a user-specified operation while a user-specified predicate expands to <code>1</code>.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<WHILE_X/>(size, pred, op, ...))</syntax>
		<param id="size">
			The size of the buffer of valid <link id="recursion steps"/> maintained by the algorithm.
		</param>
		<param id="pred">
			<para>
				The predicate that determines whether the loop should continue.
				This predicate must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					pred(s, state<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>state</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the initial state, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="op">
			<para>
				The operation used to iterate the state.
				This operation must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					op(s, state<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				The <var>state</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the initial state, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="..." optional="1">
			The initial state of the loop.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><EXPR/>(<WHILE_X/>(size, pred, op, state))</syntax>
		<param id="size">
			The size of the buffer of valid <link id="recursion steps"/> maintained by the algorithm.
		</param>
		<param id="pred">
			The predicate that determines whether the loop should continue.
			This predicate must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				pred(s, state)
			</snippet>
		</param>
		<param id="op">
			The operation used to iterate the state.
			This operation must be either a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				op(s, state)
			</snippet>
		</param>
		<param id="state">
			The initial state of the loop.
		</param>
	</usage>
	<para>
		This macro behaves identically to <WHILE/> except that the algorithm makes <link id="exponential"/> use of the <link id="recursion backend"/> and the algorithm itself yields a trampolined <link id="deferred expression"/> whenever the number of <link id="recursion steps"/> is exhausted.
		This allows for <link id="parametric resumption"/>.
	</para>
	<para>
		This algorithm maintains a buffer of <var>size</var> <link id="recursion steps"/> available at all times.
		This guarantees that the predicate and operation have <em>at least</em> <var>size</var> <link id="recursion steps"/> available whenever they are invoked.
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <WHILE_X_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <WHILE_X_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<derivative id="WHILE_X_ID"/>
	<derivative id="WHILE_X_" lang="C99"/>
	<derivative id="WHILE_X_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<WHILE_X_S/>(s, size, pred, op, ...))</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><EXPR_S/>(s)(<WHILE_X_S/>(s, size, pred, op, state))</syntax>
		</usage>
		<derivative id="WHILE_X_S_ID"/>
		<derivative id="WHILE_X_S_" lang="C99"/>
	</derivative>
</macro>

</header>
