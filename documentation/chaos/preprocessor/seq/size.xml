<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/seq/size.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines macros that count the elements in a <link id="sequence"/>.
</overview>

<macro id="SEQ_SIZE" group="size">
	<abstract>
		The <SEQ_SIZE/> macro counts the elements in its argument.
	</abstract>
	<usage lang="C99">
		<syntax><SEQ_SIZE/>(seq)</syntax>
		<param id="seq" optional="1">
			The <link id="sequence"/> whose elements are to be counted.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><SEQ_SIZE/>(seq)</syntax>
		<param id="seq">
			The <link id="sequence"/> whose elements are to be counted.
		</param>
	</usage>
	<para>
		This macro expands to the number of elements in <var>seq</var>.
		If <var>seq</var> contains more than <LIMIT_MAG/> elements, the result is <link id="saturated"/> to <LIMIT_MAG/>.
	</para>
	<listing>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-seq-size.h/>
		
		<SEQ_SIZE/>((+)(-)(*)(/)(%)) // 5
		
		#if <VARIADICS/>
		
		<SEQ_SIZE/>((1)(2, 2)(3, 3, 3)) // 3
		
		#endif
	</listing>
	<derivative id="SEQ_SIZE_ID"/>
	<derivative id="SEQ_SIZE_" lang="C99"/>
</macro>

<macro id="SEQ_SIZE_ALT" group="size">
	<abstract>
		The <SEQ_SIZE_ALT/> macro counts the elements in its argument.
	</abstract>
	<usage lang="C99">
		<syntax><SEQ_SIZE_ALT/>(seq)</syntax>
		<param id="seq" optional="1">
			The <link id="sequence"/> whose elements are to be counted.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><SEQ_SIZE_ALT/>(seq)</syntax>
		<param id="seq">
			The <link id="sequence"/> whose elements are to be counted.
		</param>
	</usage>
	<para>
		This macro expands to the number of elements in <var>seq</var>.
		If <var>seq</var> contains more than <LIMIT_MAG/> elements, the result is <link id="saturated"/> to <LIMIT_MAG/>.
	</para>
	<para>
		The efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are <assoc id="complexity/size_alt.gif">Î˜</assoc>, where <x-var>n</x-var> is the number of elements in <var>seq</var>.
	</para>
	<para>
		This macro is identical in function to <SEQ_SIZE/>.
		However, the internal structure of the algorithm may lead to better performance on longer <link id="sequences"/>.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <SEQ_SIZE_ALT_BYPASS/> must be used instead.
	</para>
	<derivative id="SEQ_SIZE_ALT_ID"/>
	<derivative id="SEQ_SIZE_ALT_" lang="C99"/>
	<derivative id="SEQ_SIZE_ALT_BYPASS">
		<usage lang="C99">
			<syntax><SEQ_SIZE_ALT_BYPASS/>(s, seq)</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><SEQ_SIZE_ALT_BYPASS/>(s, seq)</syntax>
		</usage>
		<derivative id="SEQ_SIZE_ALT_BYPASS_ID"/>
		<derivative id="SEQ_SIZE_ALT_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
