<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/arbitrary/literal.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines a macro that produces an <link id="arbitrary-precision value"/> from a series of digits.
</overview>

<macro id="ARBITRARY_LITERAL" group="literal">
	<abstract>
		The <ARBITRARY_LITERAL/> macro converts a series of digits to an <link id="arbitrary-precision value"/>.
	</abstract>
	<usage>
		<syntax><ARBITRARY_LITERAL/>(literal)</syntax>
		<param id="literal">
			The series of digits to be converted to an <link id="arbitrary-precision value"/>.
			The format of this digit series is similar to a <link id="string"/>, but it is restricted to numerals and is optionally prefixed by a parenthesized negation operator.
		</param>
	</usage>
	<para>
		This macro expands to an <link id="arbitrary-precision value"/> that represents the series of digits in <var>literal</var>.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <ARBITRARY_LITERAL_BYPASS/> must be used instead.
	</para>
	<listing>
		#include <chaos-preprocessor-arbitrary-literal.h/>
		
		<ARBITRARY_LITERAL/>(1 2 3)  // (1)(2)(3)
		<ARBITRARY_LITERAL/>((-)2 0) // ((2)(0))
	</listing>
	<derivative id="ARBITRARY_LITERAL_ID"/>
	<derivative id="ARBITRARY_LITERAL_" lang="C99"/>
	<derivative id="ARBITRARY_LITERAL_BYPASS">
		<usage>
			<syntax><ARBITRARY_LITERAL_BYPASS/>(s, literal)</syntax>
		</usage>
		<derivative id="ARBITRARY_LITERAL_BYPASS_ID"/>
		<derivative id="ARBITRARY_LITERAL_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
