<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/algorithm/push_back.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that appends an element to the end of a <link id="generic data structure"/>.
</overview>

<macro id="PUSH_BACK" type="indirect" group="push-pop append">
	<abstract>
		The <PUSH_BACK/> macro appends its second argument to the tail of its first argument.
	</abstract>
	<usage lang="C99">
		<syntax><PUSH_BACK/>(g, ...)</syntax>
		<param id="g">
			The <link id="generic data structure"/> to which the element is to be appended.
		</param>
		<param id="..." optional="1">
			The element to be appended to <var>g</var>.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><PUSH_BACK/>(g, x)</syntax>
		<param id="g">
			The <link id="generic data structure"/> to which the element is to be appended.
		</param>
		<param id="x">
			The element to be appended to <var>g</var>.
		</param>
	</usage>
	<para>
		This macro expands to a <link id="generic data structure"/> of the same type as <var>g</var> that contains the elements of <var>g</var> with the element (<var>x</var> or <code>__VA_ARGS__</code>) appended to the tail.
	</para>
	<para>
		The efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are Î˜(<x-var>n</x-var>+1), where <x-var>n</x-var> is the number of elements in <var>g</var>.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <PUSH_BACK_BYPASS/> must be used instead.
	</para>
	<listing>
		#include <chaos-preprocessor-algorithm-push_back.h/>
		#include <chaos-preprocessor-list-core.h/>
		
		<PUSH_BACK/>((<LIST/>) (a, (b, ...)), c)
		// (<LIST/>) (a, (b, (c, ...)))
	</listing>
	<derivative id="PUSH_BACK_ID"/>
	<derivative id="PUSH_BACK_" lang="C99"/>
	<derivative id="PUSH_BACK_BYPASS">
		<usage lang="C99">
			<syntax><PUSH_BACK_BYPASS/>(s, g, ...)</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><PUSH_BACK_BYPASS/>(s, g, x)</syntax>
		</usage>
		<derivative id="PUSH_BACK_BYPASS_ID"/>
		<derivative id="PUSH_BACK_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
