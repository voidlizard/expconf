<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/algorithm/x/fold_right_aux.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an <link id="exponential"/> algorithm that accumulates the elements of a <link id="generic data structure"/> from the last element to the first element which can be <link id="parametrically resumed"/>.
</overview>

<macro id="FOLD_RIGHT_AUX_X" type="indirect" group="right-accumulation">
	<abstract>
		The <FOLD_RIGHT_AUX_X/> macro accumulates the elements of its third argument with the operation specified by its second argument.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<FOLD_RIGHT_AUX_X/>(size, op, g, data, ...))</syntax>
		<param id="size">
			The size of the buffer of valid <link id="recursion steps"/> maintained by the algorithm.
		</param>
		<param id="op">
			<para>
				The operation that is to be used to accumulate the elements of <var>g</var>.
				This operation must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					op(s, elem<sup>1</sup>, data<sup>2</sup>, state<sup>3</sup>)
				</snippet>
			</para>
			<para>
				<sup>1</sup>
				If the type of <var>g</var> is non-variadic, <var>elem</var> must be the number of parameters that corresponds to the number of sub-elements in each element of <var>g</var>.
				Otherwise, <var>elem</var> must be a single parameter.
			</para>
			<para>
				<sup>2</sup>
				If the auxiliary data is parenthetic, the <var>data</var> pseudo-parameter must be the number of parameters that corresponds to the number of sub-elements in the auxiliary data.
				Otherwise, it must be a single parameter.
			</para>
			<para>
				<sup>3</sup>
				The <var>state</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the initial state, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="g">
			The <link id="generic data structure"/> whose elements are to be accumulated.
		</param>
		<param id="data" optional="1">
			Auxiliary data to be passed through the algorithm to the operation.
			This argument may be either a parenthetic expression of any arity or a non-parenthetic expression.
		</param>
		<param id="..." optional="1">
			The initial state of the accumulation.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><EXPR/>(<FOLD_RIGHT_AUX_X/>(size, op, g, data, state))</syntax>
		<param id="size">
			The size of the buffer of valid <link id="recursion steps"/> maintained by the algorithm.
		</param>
		<param id="op">
			The operation that is to be used to accumulate the elements of <var>g</var>.
			This operation must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				op(s, elem, data, state)
			</snippet>
		</param>
		<param id="g">
			The <link id="generic data structure"/> whose elements are to be accumulated.
		</param>
		<param id="data">
			Auxiliary data to be passed through the algorithm to the operation.
			This argument may be either a unary parenthetic expression or a non-parenthetic expression.
		</param>
		<param id="state">
			The initial state of the accumulation.
		</param>
	</usage>
	<para>
		This macro behaves identically to <FOLD_RIGHT_AUX/> except that the invocations of the operation are <em>not</em> trampolined, the algorithm makes <link id="exponential"/> use of the <link id="recursion backend"/>, and the algorithm itself yields a trampolined <link id="deferred expression"/> whenever the number of <link id="recursion steps"/> is exhausted.
		This allows for <link id="parametric resumption"/>.
	</para>
	<para>
		This algorithm maintains a buffer of <var>size</var> <link id="recursion steps"/> available at all times.
		This guarantees that the operation has <em>at least</em> <var>size</var> <link id="recursion steps"/> available whenever it is invoked.
	</para>
	<para>
		The <link id="exponential"/> structure of the <code>X</code>-suffixed algorithms yields a total of <library-assoc id="alpha.gif">α</library-assoc> <link id="recursion steps"/>, where <x-var>p</x-var> is the number of <link id="parametric resumptions"/> plus the initial entry, <x-var>s<sub>ω</sub></x-var> is <LIMIT_EXPR/>, <x-var>s</x-var> is the current <link id="recursion state"/> at the beginning of the algorithm (i.e. <code><STATE/>()</code>), <x-var>s<sub>δ</sub></x-var> is the buffer size, and <x-var>z</x-var> is the exponential base.
		Currently, <x-var>z</x-var> is fixed at two in the <FOLD_RIGHT_X/> algorithm (though it could easily be increased), which reduces the equation to <library-assoc id="beta.gif">β</library-assoc>.
		Ignoring the complexity of <var>op</var> (which is invoked once for each element in <var>g</var>), the efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The aysmptotic upper and lower bounds are Θ(2<x-var>n</x-var>+1), where <x-var>n</x-var> is the number of elements in <var>g</var>.
		These bounds preserve all low-order terms, which implies that the algorithm can process exactly <assoc id="complexity/fold_right.gif">γ</assoc> elements.
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <FOLD_RIGHT_AUX_X_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <FOLD_RIGHT_AUX_X_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<x-reference id="FOLD_LEFT_AUX_X"/>
	<derivative id="FOLD_RIGHT_AUX_X_ID"/>
	<derivative id="FOLD_RIGHT_AUX_X_" lang="C99"/>
	<derivative id="FOLD_RIGHT_AUX_X_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<FOLD_RIGHT_AUX_X_S/>(s, size, op, g, data, ...))</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><EXPR_S/>(s)(<FOLD_RIGHT_AUX_X_S/>(s, size, op, g, data, state))</syntax>
		</usage>
		<derivative id="FOLD_RIGHT_AUX_X_S_ID"/>
		<derivative id="FOLD_RIGHT_AUX_X_S_" lang="C99"/>
	</derivative>
</macro>

</header>
