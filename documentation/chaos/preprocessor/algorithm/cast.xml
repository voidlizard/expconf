<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/algorithm/cast.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that converts a <link id="generic data structure"/> to another type.
</overview>

<macro id="CAST" type="indirect" group="conversion">
	<abstract>
		The <CAST/> macro converts its second argument to the type specified by its first argument.
	</abstract>
	<usage>
		<syntax><CAST/>(type, g)</syntax>
		<param id="type">
			The type to which <var>g</var> is to be converted.
		</param>
		<param id="g">
			The <link id="generic data structure"/> to be converted.
		</param>
	</usage>
	<para>
		This macro expands to a <link id="generic data structure"/> of type <var>type</var> containing the elements of <var>g</var>.
		If <var>g</var> is already of type <var>type</var>, this macro expands to <var>g</var> without performing any conversion.
	</para>
	<para>
		This macro assumes that <var>g</var> <em>can</em> be converted to type <var>type</var>.
		The algorithm does not attempt to verify that the resulting data structure is actually a valid data structure of the specified type.
		For example, the following produces an invalid <link id="string"/>:
		<snippet>
			<CAST/>(
			    <STRING/>, (<SEQ/>) (+)(-)(*)(/)(%)
			)
			// invalid
		</snippet>
	</para>
	<para>
		The efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper bound of O(<x-var>n</x-var>+1), where <x-var>n</x-var> is the number of elements in <var>g</var>, occurs when <var>g</var> is not of type <var>type</var>.
		The asymptotic lower bound of Î©(0) occurs when <var>g</var> is already of type <var>type</var>.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <CAST_BYPASS/> must be used instead.
	</para>
	<listing>
		#include <chaos-preprocessor-algorithm-cast.h/>
		#include <chaos-preprocessor-list-core.h/>
		#include <chaos-preprocessor-string-core.h/>
		
		<CAST/>(<LIST/>, (<SEQ/>) (C)(H)(A)(O)(S))
		// (<LIST/>) (C, (H, (A, (O, (S, ...)))))
	</listing>
	<derivative id="CAST_ID"/>
	<derivative id="CAST_" lang="C99"/>
	<derivative id="CAST_BYPASS">
		<usage>
			<syntax><CAST_BYPASS/>(s, type, g)</syntax>
		</usage>
		<derivative id="CAST_BYPASS_ID"/>
		<derivative id="CAST_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
