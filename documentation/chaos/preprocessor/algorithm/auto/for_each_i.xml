<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/algorithm/auto/for_each_i.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that repeats a user-specified target for each element in a <link id="generic data structure"/>.
</overview>

<macro id="AUTO_FOR_EACH_I" type="object" group="for-each">
	<abstract>
		The <AUTO_FOR_EACH_I/> macro repeats the target specified by its first argument for each element in its second argument.
	</abstract>
	<usage lang="C99">
		<syntax><AUTO_FOR_EACH_I/>(macro, g)</syntax>
		<param id="macro">
			<para>
				The target that is to be repeated for each element in <var>g</var>.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, i, elem<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				If the type of <var>g</var> is non-variadic, <var>elem</var> must be <code>...</code> or the number of parameters that corresponds to the number of sub-elements in each element of <var>g</var>.
				Otherwise, <var>elem</var> must be <code>...</code> or a single parameter.
			</para>
		</param>
		<param id="g">
			The <link id="generic data structure"/> for which <var>macro</var> is to be repeated for each element.
		</param>
	</usage>
	<usage lang="C99">
		<syntax><AUTO_FOR_EACH_I/>(macro, g, ...)</syntax>
		<param id="macro">
			<para>
				The target that is to be repeated for each element in <var>g</var>.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, i, elem<sup>†</sup>, data<sup>‡</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				If the type of <var>g</var> is non-variadic, <var>elem</var> must be the number of parameters that corresponds to the number of sub-elements in each element of <var>g</var>.
				Otherwise, <var>elem</var> must be a single parameter.
			</para>
			<para>
				<sup>‡</sup>
				The <var>data</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the auxiliary data, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="g">
			The <link id="generic data structure"/> for which <var>macro</var> is to be repeated for each element.
		</param>
		<param id="..." optional="1">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<para>
		The <AUTO_FOR_EACH_I/> macro is a <link id="higher-order thunk"/> that deduces the current <link id="higher-order entry point"/> and invokes <FOR_EACH/>.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-algorithm-auto-for_each_i.h/>
		#include <chaos-preprocessor-arithmetic-inc.h/>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-lambda-ops.h/>
		#include <chaos-preprocessor-repetition-auto-enum.h/>
		#include <chaos-preprocessor-string-core.h/>
		
		#if <VARIADICS/>
		
		#define MACRO(s, i, elem) \
		    int elem[<INC/>(i)] = { \
		        <AUTO_ENUM/>(<INC/>(i), <ARG/>(1)) \
		    }; \
		    /**/
		
		<AUTO_FOR_EACH_I/>(
		    MACRO,
		    (<STRING/>) a b c
		)
		// int a[1] = { 0 }; int b[2] = { 0, 1 }; int c[3] = { 0, 1, 2 };
		
		#endif
	</listing>
	<derivative id="AUTO_FOR_EACH_I_ID" lang="C99"/>
	<derivative id="AUTO_FOR_EACH_I_" lang="C99"/>
</macro>

</header>
