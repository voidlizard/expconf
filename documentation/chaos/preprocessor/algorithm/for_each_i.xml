<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/algorithm/for_each_i.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that repeats a user-specified target for each element in a <link id="generic data structure"/>.
</overview>

<macro id="FOR_EACH_I" type="indirect" group="for-each">
	<abstract>
		The <FOR_EACH_I/> macro repeats the target specified by its first argument for each element in its second argument.
	</abstract>
	<usage lang="C99">
		<syntax><EXPR/>(<FOR_EACH_I/>(macro, g))</syntax>
		<param id="macro">
			<para>
				The target that is to be repeated for each element in <var>g</var>.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, i, elem<sup>†</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				If the type of <var>g</var> is non-variadic, <var>elem</var> must be <code>...</code> or the number of parameters that corresponds to the number of sub-elements in each element of <var>g</var>.
				Otherwise, <var>elem</var> must be <code>...</code> or a single parameter.
			</para>
		</param>
		<param id="g">
			The <link id="generic data structure"/> for which <var>macro</var> is to be repeated for each element.
		</param>
	</usage>
	<usage lang="C99">
		<syntax><EXPR/>(<FOR_EACH_I/>(macro, g, ...))</syntax>
		<param id="macro">
			<para>
				The target that is to be repeated for each element in <var>g</var>.
				This target must be either a <link id="λ expression"/> or a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
				<snippet>
					macro(s, i, elem<sup>†</sup>, data<sup>‡</sup>)
				</snippet>
			</para>
			<para>
				<sup>†</sup>
				If the type of <var>g</var> is non-variadic, <var>elem</var> must be the number of parameters that corresponds to the number of sub-elements in each element of <var>g</var>.
				Otherwise, <var>elem</var> must be a single parameter.
			</para>
			<para>
				<sup>‡</sup>
				The <var>data</var> pseudo-parameter must be either <code>...</code> or the number of parameters that corresponds to the number of arguments in the auxiliary data, <code>__VA_ARGS__</code>.
			</para>
		</param>
		<param id="g">
			The <link id="generic data structure"/> for which <var>macro</var> is to be repeated for each element.
		</param>
		<param id="..." optional="1">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><EXPR/>(<FOR_EACH_I/>(macro, g, data))</syntax>
		<param id="macro">
			The target that is to be repeated for each element in <var>g</var>.
			This target must be a macro name that refers to a macro with a signature compatible with the following pseudo-signature:
			<snippet>
				macro(s, i, elem, data)
			</snippet>
		</param>
		<param id="g">
			The <link id="generic data structure"/> for which <var>macro</var> is to be repeated for each element.
		</param>
		<param id="data">
			Auxiliary data to be passed through the algorithm to the target.
		</param>
	</usage>
	<para>
		The <FOR_EACH_I/> macro itself expands to a <link id="deferred expression"/> in terms of <code><NEXT/>(s)</code>.
		This <link id="deferred expression"/>, when invoked with <EXPR/>, expands to the result of the repeated invocation of the target for each element in <var>g</var>.
		This is illustrated by the following pseudo-code (where <code>N</code> is the index of the last element in <var>g</var>):
		<snippet>
			macro(s, 0, g[0], data) macro(s, 1, g[1], data) ... macro(s, N, g[N], data)
		</snippet>
	</para>
	<para>
		The target is invoked with the current <link id="recursion state"/> (<var>s</var>), the index of a particular element (<var>i</var>), a particular element (<var>elem</var>), and, if it exists, the auxiliary data (<var>data</var> or <code>__VA_ARGS__</code>).
		This target may expand to a <link id="deferred expression"/> in terms of <NEXT/>(s).
		This allows the target to recurse on itself if necessary.
	</para>
	<para>
		In C99, it is possible to omit the auxiliary data argument altogether.
		This is different than passing "nothing" as the auxiliary data.
		<snippet>
			#define D (<TUPLE/>) (a, b, c)
			
			<EXPR/>(<FOR_EACH_I/>(MACRO, D,)) // #1
			<EXPR/>(<FOR_EACH_I/>(MACRO, D))  // #2
		</snippet>
		The first line passes "nothing" as the auxiliary data, which causes <code>MACRO</code> to be invoked as (e.g.)...
		<snippet>MACRO(s, 0, a,)</snippet>
		The second line omits the auxiliary data, which causes <code>MACRO</code> to be invoked as (e.g.)...
		<snippet>MACRO(s, 0, a)</snippet>
		The fundamental difference is that, in the first line, the auxiliary data is empty (which might have a valid meaning as data), but, in the second line, <em>there is no auxiliary data</em>.
		Hence, the algorithm is overloaded on a <link id="true-optional parameter"/>.
	</para>
	<para>
		Invocations of the target are trampolined such that each invocation is invoked with <code><NEXT/>(s)</code>, where <var>s</var> is the original <link id="recursion state"/> at the beginning of the algorithm (i.e. <code><STATE/>()</code>).
		This maximizes the utility of the <link id="recursion backend"/>.
	</para>
	<para>
		Ignoring the complexity of <var>macro</var> (which is invoked once for each element in <var>g</var>), the efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are Θ(<x-var>n</x-var>+1), where <x-var>n</x-var> is the number of elements in <var>g</var>.
	</para>
	<para>
		This macro deduces the current <link id="recursion state"/> and invokes <FOR_EACH_I_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <FOR_EACH_I_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-algorithm-for_each_i.h/>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-lambda-ops.h/>
		#include <chaos-preprocessor-list-core.h/>
		#include <chaos-preprocessor-recursion-expr.h/>
		
		#define MACRO(s, i, elem, data) elem[i]
		
		<EXPR/>(<FOR_EACH_I/>(
		    MACRO,
		    (<LIST/>) (x, (y, (z, ...))),
		    ~
		))
		// x[0] y[1] z[2]
		
		#if <VARIADICS/>
		
		??=include <PLACEHOLDERS/>(1)
		
		<EXPR/>(<FOR_EACH_I/>(
		    _2 <LAMBDA/>([) _1 ],
		    (<LIST/>) (x, (y, (z, ...)))
		))
		// x[0] y[1] z[2]
		
		??=include <PLACEHOLDERS/>(0)
		
		#endif
	</listing>
	<derivative id="FOR_EACH_I_ID"/>
	<derivative id="FOR_EACH_I_" lang="C99"/>
	<derivative id="FOR_EACH_I_S">
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<FOR_EACH_I_S/>(s, macro, g))</syntax>
		</usage>
		<usage lang="C99">
			<syntax><EXPR_S/>(s)(<FOR_EACH_I_S/>(s, macro, g, ...))</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><EXPR_S/>(s)(<FOR_EACH_I_S/>(s, macro, g, data))</syntax>
		</usage>
		<derivative id="FOR_EACH_I_S_ID"/>
		<derivative id="FOR_EACH_I_S_" lang="C99"/>
	</derivative>
</macro>

</header>
