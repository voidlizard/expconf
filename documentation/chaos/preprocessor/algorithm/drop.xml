<?xml version="1.0" encoding="UTF-8"?>

<!-- **************************************************************************
     *                                                                        *
     *    (C) Copyright Paul Mensonides 2003-2005.                            *
     *                                                                        *
     *    Distributed under the Boost Software License, Version 1.0.          *
     *    (See accompanying file LICENSE).                                    *
     *                                                                        *
     *    See http://chaos-pp.sourceforge.net for the most recent version.    *
     *                                                                        *
     ************************************************************************** -->

<header name="chaos/preprocessor/algorithm/drop.h" author="Paul Mensonides" date="2003-2005">
<overview>
	The <self/> header defines an algorithm that yields the remainder of a <link id="generic data structure"/> after removing a user-specified number of elements.
</overview>

<macro id="DROP" type="indirect" group="range">
	<abstract>
		The <DROP/> macro removes the number of elements specified by its first argument from the head of its second argument.
	</abstract>
	<usage>
		<syntax><DROP/>(n, g)</syntax>
		<param id="n">
			The number of elements to be removed.
			Valid values range from <code>0</code> to <code><SIZE/>(g)</code>.
		</param>
		<param id="g">
			The <link id="generic data structure"/> from which elements are to be removed.
		</param>
	</usage>
	<para>
		This macro expands to a <link id="generic data structure"/> of the same type as <var>g</var> containing all but the first <var>n</var> elements of <var>g</var>.
	</para>
	<para>
		The efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are Î˜(<x-var>n</x-var>+1), where <x-var>n</x-var> is <var>n</var>.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <DROP_BYPASS/> must be used instead.
	</para>
	<listing>
		#include <chaos-preprocessor-algorithm-drop.h/>
		#include <chaos-preprocessor-list-core.h/>
		
		<DROP/>(
		    3,
		    (<LIST/>) (a, (b, (c, (d, (e, ...)))))
		)
		// (<LIST/>) (d, (e, ...))
	</listing>
	<derivative id="DROP_ID"/>
	<derivative id="DROP_" lang="C99"/>
	<derivative id="DROP_BYPASS">
		<usage>
			<syntax><DROP_BYPASS/>(s, n, g)</syntax>
		</usage>
		<derivative id="DROP_BYPASS_ID"/>
		<derivative id="DROP_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
